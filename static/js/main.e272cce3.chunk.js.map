{"version":3,"sources":["containers/App.js","components/ConnectionLine.js","components/StationSelection.js","containers/StationSelection.js","components/InformationOverlay.js","components/Popup.js","containers/Popup.js","components/ImageWithText.js","components/StationCard.js","components/DepartureCard.js","containers/DepartureCard.js","components/DestinationCard.js","containers/DestinationCard.js","components/DestinationList.js","containers/DestinationList.js","components/Home.js","containers/HomePage.js","routes.js","containers/Root.js","index.js","actions/counter.js","reducers/clock.js","reducers/mvg.js","reducers/destinations.js","reducers/location.js","actions/connectivity.js","reducers/connectivity.js","reducers/index.js","reducers/counter.js","sagas/location.js","api/line.js","sagas/mvg.js","sagas/destination.js","sagas/line.js","sagas/index.js","store/configureStore.dev.js","components/Style.js","actions/mvg.js","utils/utils.js","api/index.js","actions/destination.js","store/configureStore.js","api/destination.js","components/LineTag.js","actions/location.js","actions/clock.js"],"names":["App","react","this","props","children","React","style","connectionLineContainer","display","height","left","flexDirection","flex","right","lineComponent","space","stationComponent","middle","alignItems","justifyContent","ConnectionLine","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","lineWidth","stationPointWidth","color","lineStyle","concat","background","react_default","a","createElement","arguments","length","undefined","containerStyle","stationStyle","minHeight","minWidth","maxHeight","maxWidth","borderRadius","border","_this2","connection","connectionPartList","Utils","map","part","i","label","nextColor","lineTag","LineTag","backgroundColor","line","timeWithStationNameStyle","time","stationName","commonComponents","departure","className","aria-hidden","arrival","from","name","destination","to","Component","StationSelection","renderSuggestion","station","getSuggestionValue","id","onSuggestionsClearRequested","setState","suggestions","onChange","event","_ref","newValue","method","split","indexOf","stationObj","getStationObjFromName","onSelect","value","state","onSuggestionsFetchRequested","_ref2","searchString","trim","toLowerCase","stations","s","objectSpread","order","filter","sort","sa","sb","slice","val","find","suggestion","_ref3","_this$state","inputProps","placeholder","onBlur","dist_default","bind","onSuggestionHighlighted","theme","destinationCard","input","connect","mvg","location","dispatch","InformationOverlay","overlayType","react_spinners","loading","loadingOverlayStyle","spinnerContainer","getMainIconElement","title","Popup","defaultLocation","stationChosen","mapCenter","closestStations","getStationLocation","displayMarker","connectionIndex","numDisplayConnection","apiInstance","API","_this$state$stationCh","latitude","longitude","setLocation","zoom","center","getClosestStations","closestStationsToMapCenter","Map","zoomControl","onViewportChanged","onMapMoveEnd","Marker","key","onClick","onStationChosen","position","Tooltip","permanent","inputFieldState","dest","currentStation","toFixed","conn","firstConn","isFirst","Cell","textAlign","icon","subval","duration","arrivalTime","departureTimeDiff","arrivalTimeDiff","borderRight","borderLeft","_this3","destinationDetail","connections","ConnectionOverviewComponent","flexWrap","react_bootstrap_es","show","bsSize","onHide","Header","closeButton","Body","marginTop","getStationDistanceToLocation","getConnectionAttributeComponent","setConnectionIndex","ConnectionLine_ConnectionLine","InformationOverlay_InformationOverlay","Title","lib_default","size","Math","round","window","innerHeight","departureQR","destinationDetailComponent","departureQRComponent","modal","container","inputField","containers_StationSelection","onInputFieldChange","getMap","Footer","disabled","bsStyle","closest_stations","connectionLines","lat","lng","type","LocationAction","clearDestinationDetail","DestinationAction","ImageWithText","glyphicon","glyph","imageWithText","opacity","getIcon","text","StationCard","_this$props$station","_this$props","toPrecision","shortName","stationCard","leftContainer","tokenList","products","getTransportTypeToken","rightContainer","getDistance","DepartureCard","departureTime","currentTime","hasPassed","isGone","centerContentStyle","timestr","_Utils$timeDifference2","hh","mm","ss","pad","toString","padStart","Glyphicon_default","watching","watchDeparture","qr","btoa","JSON","stringify","_","pick","showQR","sev","live","departureCard","leftColumn","getLiveDepartureColor","timeLeft","middleColumn","upperRow","getSEVStyle","lowerRow","rightColumn","showQRCode","removeWatchingDeparture","clock","WATCH_DEPARTURE","SHOW_QR","DestinationCard","conA","conB","n","getConnections","getConnectionLoadingComponent","getConnectionDisplayComponents","fromTime","toTime","remainTime","up","down","isEdit","horizontal","componentClass","ControlLabel","sm","block","onCancel","isRemoving","getRemoveComponent","getTravelTimeComponent","getFastestConnectionDisplayComponents","remove","onRemove","stationsList","destinations","DestinationList","displayMode","LIST","MAP","numDestinationShown","currentPage","isAddingNewDestination","selectedConnection","selectedPart","getDestinations","nextProps","fromStationId","toStationId","width","TileLayer","url","draggable","Circle","radius","onMouseOver","highlightLinesToStation","onMouseOut","clearHighlightsToStation","showDestinationDetail","tooltip","overview","getConnectionTooltipRemainingDepartureTime","getArrivalTime","getTravelTime","values","Polyline","getOpacityForLine","onLineMouseOver","clearLineHighlight","positions","coords","_this4","buttons","mode","glpyhButton","setDisplayMode","clearDestinations","cancelRemoveDestinations","removeDestinations","destinationList","header","e","preventDefault","containers_DestinationCard","isEditing","cancelAdd","addDestination","ImageWithText_ImageWithText","displayAddDestinationCell","_this5","indexFrom","indexTo","destinationContainer","removeDestination","editComponent","addNewDestinationButton","component","_this6","numComponents","numPageNeeded","ceil","pagination","Item","destinationComponents","paginationComponent","mainContainer","bottomContainer","getDisplayComponents","lines","refereshRoute","target_station_id","getLineInfo","MVGAction","DestinationListComponent","Home","timeFilter","numDeparturesShown","departurePage","showPopup","filterLabel","remainder","content","nextRefreshTime","getNextRefreshTime","shouldUpdate","toggleUpdate","fluid","Brand","Collapse","isStationLoaded","getNextRefreshComponent","pullRight","error","getConnectivityComponent","selectLocation","navBar","eventKey","href","toLocaleString","endpointNameToStateDict","MVG","mvg_status","MVV","mvv_status","Backend","backend_status","Proxy","proxy_status","numFails","reduce","v","keys","stationSelection","labels","clearDepartureQR","watchingDeparture","containers_DepartureCard","watchingDepature","isChangingLocation","StationSelection_StationSelection","watchingDepatureComponent","containers_DestinationList","headerElement","stationElements","StationCard_StationCard","toConsumableArray","departures","dept","getFilteredDepartureList","min","fullDepartureList","floor","active","lbl","lblFilterOptions","uniq","d","envetKey","timeOptions","t","filterTime","topContainer","paddingRight","departureLineFilterDropdownList","departureTimeFilterDropdownList","middleContainer","departureList","getDeparturePagination","containers_Popup","hidePopup","app","loadingOverlay","popup","connectivity","ClockAction","toggleChangeLocation","routes","App_App","Switch","Route","path","HomePage","Root","es","store","react_router_redux_es","history","configureStore","render","react_hot_loader","Root_Root","document","getElementById","INCREMENT_COUNTER","DECREMENT_COUNTER","increment","decrement","incrementIfOdd","getState","counter","incrementAsync","delay","setTimeout","defaultState","Date","SET_MVG_CONNECTIVITY_FLAG","SET_PROXY_CONNECTIVITY_FLAG","SET_BACKEND_CONNECTIVITY_FLAG","SET_MVV_CONNECTIVITY_FLAG","rootReducer","combineReducers","action","console","log","assign","apply","defineProperty","CLOCK_RESET","CLOCK_TICK","TOGGLE_UPDATE","router","ConnectivityActions","ok","refreshLocation","setLocationWatcher","setLocationSuccessWatcher","locationStorageFieldKey","getLocation","getPromise","regenerator_default","wrap","_context","prev","next","setPromise","put","t0","stop","_marked","_context2","select","sent","take","_marked2","_context3","takeLatest","_marked3","_context4","_marked4","require","Store","cheerio","_default","storeEncodeKey","proxy","endpoint","encodingEndpoint","generalEncodingEndpoint","encodeDict","performRequest","response","$","load","resultObj","el","attr","get","has","data","Promise","all","fetchRegionalBusEncodings","fetchGeneralEncodings","responses","useCache","getLineInfoEncode","encode","getRequestURL","performRequestJSON","some","r","geoObjects","finalResult","flattenList","items","item","fetch","headers","then","json","destId","conns","partList","partLabel","getConnectionPartCacheLabel","_this2$computeLineSeg","computeLineSegment","mvvStationParts","record","paths","coordsStringToCoord","points","pt","ref","forEach","index","getIndexOfClosestCoords","fromId","toId","mvvStations","purifyId","parseInt","mvvStationsIds","fromIdInList","toIdInList","hasInvalid","lineLabel","isSEV","splitConnectionPartCacheLabel","sortedStations","sortStations","range","getStationsBetween","convertMVVStationToMVGStation","fetchStation","getGeoLocation","checkWatchingDepartureExpire","onFetchStationSuccess","onGetConnection","onAddDestinationSuccess","onGetDepartures","fetchConnectionsToAllStations","onComputeLineSegment","reloadDestinations","onRemoveDestinationSuccess","watchFetchStations","watchGetDepartures","watchFetchStationsSuccess","watchGetConnections","watchGetDestinationSuccess","watchAddDestinationSuccess","watchComputeLineSegment","watchDestinationRemove","watchDestinationAdd","Api","lineInstance","Line","storeKey","getAllStations","mvg_marked","LocationSaga","abrupt","mvg_marked2","depature","mvg_marked3","mvg_marked4","getClosestStationsFromState","closestStation","from_station_id","connectionsListObj","_context5","_marked5","_context6","_marked6","closestStationsId","departureLists","_context7","getDepartureById","b","dep","_marked7","destinations_ids","_context8","_marked8","displayLines","_context9","firstConnectionParts","getPartsForNthConnection","getLineForConnection","_marked9","_context10","_marked10","_context11","_marked11","_context12","takeEvery","_marked12","_context13","_marked13","_context14","_marked14","_context15","_marked15","_context16","_marked16","_context17","_marked17","_context18","_marked18","_context19","_marked19","_context20","_marked20","clearDestination","storeDestination","getDestination","storeDestinationWatcher","getDestinationWatcher","clearDestinationWatcher","removeDestinationWatcher","ConnectivityAction","destination_marked","result","addDestinations","destination_marked2","destination_marked3","destination_marked4","destination_marked5","destination_marked6","destination_marked7","destination_marked8","fetchEncodings","getLineInfoOnGetConnectionSuccess","getLineWatcher","getLineOnGetConnectionSuccessWatcher","getLineEncodingWatcher","lineApiInstance","LineAPI","fetchLineEncodings","line_marked","line_marked2","l","Set","line_marked3","line_marked4","line_marked5","line_marked6","tick","mainLoop","rootSaga","getClock","stateClock","sagas_marked2","sagas_marked3","sagas_marked4","sagaMiddleware","createSagaMiddleware","createHashHistory","initialState","middleware","enhancers","push","thunk","logger","createLogger","level","collapsed","routerMiddleware","actionCreators","counterActions","routerActions","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","enhancer","createStore","run","cell","_Users_travis_Programming_MVGDashboard_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","padding","fontWeight","__webpack_exports__","overflowX","paddingBottom","paddingTop","textTransform","margin","transportationList","edit","button","marginBottom","paddingLeft","fontSize","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","inputFocused","outline","inputOpen","suggestionsContainer","suggestionsContainerOpen","zIndex","top","suggestionsList","listStyleType","cursor","suggestionHighlighted","borderBottom","bottom","overlay","overflowY","alignText","__webpack_require__","GET_STATIONS","GET_DEPARTURES","GET_DEPARTURES_FAILED","GET_DEPARTURES_SUCCESS","GET_CLOSEST_STATIONS","FETCH_STATION_FAILED","FETCH_STATION_SUCCESS","SET_CLOSEST_STATION","SET_CURRENT_LOCATION","GET_CONNECTION","GET_CONNECTION_SUCCESS","GET_CONNECTION_FAILED","REMOVE_CONNECTION","GET_LINE","GET_LINE_SUCCESS","GET_LINE_FAILED","GET_LINE_ENCODING","GET_LINE_ENCODING_SUCCESS","GET_LINE_ENCODING_FAILED","COMPUTE_LINE_SEGMENT","SET_LINE_SEGMENT_CACHE","getMapTileLayer","react__WEBPACK_IMPORTED_MODULE_2___default","react_leaflet__WEBPACK_IMPORTED_MODULE_6__","getStationName","place","deg2rad","deg","PI","getDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","dLat","dLon","sin","cos","atan2","sqrt","getProductColorCode","product","getColor","match","num","getProductShortName","intermediateComponent","react_bootstrap__WEBPACK_IMPORTED_MODULE_5__","walkingComponent","res","connectionPartType","_components_LineTag__WEBPACK_IMPORTED_MODULE_3__","list","pop","getStationProductLineTags","p","lists","_Users_travis_Programming_MVGDashboard_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__","unixTimeStampToDate","ts","len","unixTimeStampToDateHHMM","getHours","getMinutes","timeDifferenceToDateString","timeA","timeB","diff","msec","timeDifferenceFormatString","withSign","_timeDifferenceToDate","timeDifferenceToDateHHMMSS","_timeDifferenceToDate2","listOfN","Array","mvvStation","mvgStationList","correspondingMVGStation","mvgS","latlngCoord","parts","getStationLatLng","getStationOverviewComponent","cs","parseFloat","sample","dists","coord","abs","Infinity","argmin","dist","getSmoothPathCoordsInLatLng","getCorrespondences","mvgId","mvv","mvgStation","weirdCoords","latlng","weird","smoothWeirdCoords","getSmoothLineSegment","stationsAId","stationsBId","correspondences","corr","x","fromIndsInSmoothWeirdCoords","toIndsInSmoothWeirdCoords","applyIndices","smoothWeirdCoordsSegment","ma","mb","mat","det","inv","getRelationMatrix","results","segment","_Users_travis_Programming_MVGDashboard_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","proxyURL","X-MVG-Authorization-Key","Accept","Content-Type","from_id","to_id","getStationsUnrestrictedEndpoint","locations","getConnectionEndpoint","connectionList","numDepartures","getDepartureEndpointById","now","validDepartures","servingLines","lineNumber","number","latA","lngA","latB","lngB","ADD_DESTINATION","ADD_DESTINATION_SUCCESS","ADD_DESTINATION_FAILED","GET_DESTINATION","GET_DESTINATION_SUCCESS","GET_DESTINATION_FAILED","CLEAR_DESTINATION","CLEAR_DESTINATION_SUCCESS","CLEAR_DESTINATION_FAILED","REMOVE_DESTINATION","REMOVE_DESTINATION_SUCCESS","REMOVE_DESTINATION_FAILED","SHOW_DESTINATION_DETAIL","module","exports","rest","feathers","DATABASE_URL","restClient","configure","destinationService","service","_Users_travis_Programming_MVGDashboard_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_travis_Programming_MVGDashboard_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","_callee2","create","_x","_callee3","_x2","_ref4","_callee4","resolve","reject","localStorage","setItem","getItem","parse","clearPromise","clear","removePromise","obj","catch","react__WEBPACK_IMPORTED_MODULE_1___default","TOGGLE_LOCATION_MODE","SET_LOCATION","SET_LOCATION_SUCCESS","SET_LOCATION_FAILED"],"mappings":"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","file":"static/js/main.e272cce3.chunk.js","sourcesContent":["// @flow\nimport * as React from 'react';\n\ntype Props = {\n  children: React.Node\n};\n\nexport default class App extends React.Component<Props> {\n  props: Props;\n\n  render() {\n    return <div>{this.props.children}</div>;\n  }\n}\n","import React from 'react'\nimport * as Utils from '../utils/utils'\nimport LineTag from './LineTag'\n/*\n  Props:\n    connection: the connection object,\n    which has the connectionPartList object\n\n    (optional) lineWidth: the width of line, in px\n    (optional) stationPointWidth: size (height and width) of the station \"circle\"\n*/\n\nconst style = {\n  connectionLineContainer: {\n    display: 'flex',\n    height: '100%',\n    left: {\n      display: 'flex',\n      flexDirection: 'column',\n      flex: 2,\n    },\n    right: {\n      display: 'flex',\n      flexDirection: 'column',\n      flex: 5,\n    }\n  },\n  lineComponent: {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'row',\n    // for squeezing the \"line\" to the middle\n    space: {\n        flex: 1\n    }\n  },\n  stationComponent: {\n    middle: {\n      display: 'flex',\n      flex: '1',\n      alignItems: 'center',\n      justifyContent: 'center',\n\n    }\n  }\n}\nexport default class ConnectionLine extends React.Component {\n\n  constructor(props) {\n    super(props)\n    // some common config here\n    this.lineWidth = this.props.lineWidth || 6\n    this.stationPointWidth = this.props.stationPointWidth || 24\n  }\n  // return a line component\n  // which should look like \"   |   \",\n  // the spaces on the left and right are \"filled\" by two empty flexbox\n  // the \"line\" at the middle is actually a div filled with color, with width \"lineWidth\"\n  lineComponent(color) {\n    let lineStyle = {\n      flex: `0 0 ${this.lineWidth}px`,\n      background: color\n    }\n    return (\n      <div style={style.lineComponent}>\n        <div style={style.lineComponent.space}/>\n        <div style={lineStyle} />\n        <div style={style.lineComponent.space}/>\n      </div>\n    )\n  }\n  /*\n    return a station component that look like:\n    \"  |     <- only when \"headColor\"\n       O     time,Station info blah blah\n       |   \" <- only when \"tailColor\"\n  */\n\n  stationComponent(color,headColor = null,tailColor = null) {\n    const containerStyle = {\n      flex: `0 0 ${this.stationPointWidth}px`,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    }\n    const stationStyle = {\n      background: 'transparent',\n      minHeight: this.stationPointWidth,\n      minWidth: this.stationPointWidth,\n\n      maxHeight: this.stationPointWidth,\n      maxWidth: this.stationPointWidth,\n      borderRadius: this.stationPointWidth / 2,\n      border: `${this.lineWidth}px solid ${color}`\n    }\n    return (\n      <div style={containerStyle}>\n        <div style={stationStyle}/>\n      </div>\n\n    )\n  }\n  render() {\n    let connection = this.props.connection\n    if(!connection || !connection.connectionPartList || !connection.connectionPartList.length) return null\n    return (\n      <div style={style.connectionLineContainer}>\n        <div style={style.connectionLineContainer.left}>\n        {\n          Utils.flattenList(\n            // for each part the map below should give either 2 or 3 components\n            // when its first part it gives 3, otherwise it gives 2\n            connection.connectionPartList.map((part,i) => {\n            // TODO: give the part..\n              let color = Utils.getColor(part.label),\n                  nextColor = (i == connection.connectionPartList.length - 1)?\n                    null:Utils.getColor(connection.connectionPartList[i + 1].label)\n                    // try to see whats the label of the next component,\n                    // if theres none then leave it as null, otherwise give the lower part of the second station to the next color\n                    /*\n                        Like this:\n                            |\n                            O\n                            1   <- another color\n                    */\n              // deal with the head case first...\n              if (i == 0) return [\n                /*\n                    O\n                    |\n                */\n                this.stationComponent(color,null,color),\n                this.lineComponent(color),\n                this.stationComponent(color,color,nextColor)\n                /*\n                    |\n                    O\n                */\n              ]\n              else if(i != connection.connectionPartList.length - 1)return [\n                this.lineComponent(color),\n                this.stationComponent(color,color,nextColor)\n              ]\n              else return [\n                this.lineComponent(color),\n                this.stationComponent(color,color,null)\n              ]\n\n            })\n          )\n        }\n        </div>\n        {/* The Right container: contains the info and such*/}\n\n        <div style={style.connectionLineContainer.right}>\n          {\n            Utils.flattenList(\n              connection.connectionPartList.map((part,i) => {\n                /*\n                  If the part is not the last one (i != numParts - 1), there should be two components,\n                  -  one next to the station,\n                     with the same height with the station dots,\n                  -  a container with flex 1, which shows the direction and line\n                  Otherwise there should be three:\n                  - The first two are the same with the above,\n                  - The last would be the info and arrival time of the last stop.\n                */\n                let color = Utils.getColor(part.label),\n                lineTag = part.label?(<LineTag backgroundColor={color} line={part.label} />): null, // no line tag if not needed\n                timeWithStationNameStyle = {\n                  flex: `0 0 ${this.stationPointWidth}px`,\n                  display: 'flex',\n                  time: {\n                    flex: 1,\n                    display: 'flex',\n                    flexDirection: 'column'\n                  },\n                  stationName: {\n                    flex: 3\n                  }\n                },\n                lineNameDirectionStyle = {\n                  flex: '1',\n                  display: 'flex',\n                  alignItems: 'center' // put the info at the middle\n                },\n\n                commonComponents = [\n                  <div style={timeWithStationNameStyle}>\n                    <div style={timeWithStationNameStyle.time}>\n                      <b>{Utils.unixTimeStampToDateHHMM(part.departure)}</b>\n                      {\n                        // here displays the waiting time\n                        i > 0 && (\n                          <div className=\"text-danger\">\n                            (\n                              <span className=\"glyphicon glyphicon-time\" aria-hidden=\"true\"></span>\n                              {Utils.timeDifferenceFormatString(\n                                connection.connectionPartList[i - 1].arrival,\n                                part.departure\n                              )}\n                            )\n                          </div>\n                        )\n                      }\n\n                    </div>\n                    <div style={timeWithStationNameStyle.stationName}>\n                      {part.from.name}\n                    </div>\n                  </div>,\n\n                  <div style={lineNameDirectionStyle}>\n                    {lineTag || <span className=\"glyphicon glyphicon-piggy-bank\" aria-hidden=\"true\"></span>}\n                    {part.destination || \"Walking\"}\n                    {/*\n                        Well, when the line tag cannot be constructed it is quite certain that this part is a walking component\n                        so the travel time is added to tell you how much time you need to walk...\n                    */}\n                    {!lineTag && <div className=\"text-info\">({Utils.timeDifferenceFormatString(part.departure,part.arrival)})</div>}\n                  </div>\n                ]\n\n                if(i != connection.connectionPartList.length - 1) {\n                  return commonComponents\n                } else {\n                  // the last comonent: at the extra one\n                  return [\n                    ...commonComponents,\n                    <div style={timeWithStationNameStyle}>\n                      <div style={timeWithStationNameStyle.time}>\n                        {Utils.unixTimeStampToDateHHMM(part.arrival)}\n                      </div>\n                      <div style={timeWithStationNameStyle.stationName}>\n                        {part.to.name}\n                      </div>\n                    </div>\n                  ]\n                }\n              })\n            )\n          }\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport Autosuggest from 'react-autosuggest'\nimport {\n  Well,\n  FormGroup,\n  ControlLabel,\n} from 'react-bootstrap'\nimport style from './Style.js';\nimport * as Utils from '../utils/utils'\nexport default class StationSelection extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      value: '',\n      suggestions: []\n    }\n  }\n  renderSuggestion = (station) => {\n    return Utils.getStationOverviewComponent(station)\n  }\n\n  getSuggestionValue = (station) => {\n    return station.id\n  }\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  }\n  onChange = (event, {newValue,method}) => {\n    if('up,down'.split(',').indexOf(method) != -1) return // no change here..\n    if('click,enter'.split(',').indexOf(method) != -1) {\n      let stationObj = this.getStationObjFromName(newValue)\n      if(stationObj) this.props.onSelect(stationObj)\n    }\n    else if(this.props.value == null) { // this is not given\n      this.setState({\n        value: newValue\n      })\n    } else if(this.props.onChange){\n      this.props.onChange({\n        value: newValue,\n        suggestions: this.state.suggestions\n      }) // this gives the input value only!\n    }\n  }\n  onSuggestionsFetchRequested = ({value}) => {\n    let searchString = value.trim().toLowerCase()\n    if(searchString.length == 0) return []\n    let suggestions = this.props.stations\n      .map(s => ({...s,name: s.name.trim().toLowerCase()}))\n      .map(s => ({...s,order: s.name.indexOf(searchString)}))\n      .filter(s => s.order != -1)\n      .sort((sa,sb) => sa.order - sb.order)\n      .slice(0,15)\n    this.setState({\n      suggestions\n    })\n  }\n  getStationObjFromName(val) {\n    // let station = this.props.stations.find(s => s.name.trim().toLowerCase() == val)\n    let station = this.props.stations.find(s => s.id == val)\n    if(station) {\n      return station\n    }\n  }\n  onSuggestionHighlighted({suggestion}) {\n    if(this.props.onChange && this.props.value && suggestion) this.props.onChange({\n      value: this.props.value,\n      suggestions: [suggestion]\n    })\n  }\n  render() {\n    let { value, suggestions } = this.state\n    if(this.props.value) value = this.props.value // use an external one if it is given\n    const inputProps = {\n      placeholder: \"Give a station name\",\n      value,\n      onChange: this.onChange,\n      onBlur: this.onBlur\n    }\n\n    return (\n      <Autosuggest\n        suggestions={this.state.suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested.bind(this)}\n        onSuggestionHighlighted={this.onSuggestionHighlighted.bind(this)}\n        getSuggestionValue={this.getSuggestionValue}\n        renderSuggestion={this.renderSuggestion}\n        inputProps={inputProps}\n        theme={style.destinationCard.input}\n      />\n    )\n  }\n}\n","import StationSelection from '../components/StationSelection'\nimport {connect} from 'react-redux'\nimport * as LocationAction from '../actions/location'\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.mvg,\n    ...state.location\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(StationSelection)\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport style from './Style.js';\nimport { DotLoader } from 'react-spinners';\nexport default class InformationOverlay extends React.Component {\n\n  getMainIconElement() {\n    if(this.props.overlayType == 'loading') {\n      return ( <DotLoader color={'#ffffff'} loading={true}/> )\n    }\n    return <p> Error! </p>\n  }\n  render() {\n      return (\n        <div style={style.loadingOverlayStyle}>\n          <div style={style.loadingOverlayStyle.spinnerContainer}>\n            {this.getMainIconElement()}\n          </div>\n          <p>{this.props.title}</p>\n        </div>\n      )\n  }\n}\n\nInformationOverlay.propTypes = {\n  title: PropTypes.string,\n  overlayType: PropTypes.oneOf(['loading','error']).isRequired,\n}\n","import React from 'react'\nimport {\n  Modal,\n  Button,\n  Form,\n  FormGroup,\n  InputGroup,\n  ControlLabel,\n  Container,\n  Row,Col,\n  Label,\n  Glyphicon,\n} from 'react-bootstrap'\nimport {\n  Map,\n  Marker,\n  DivOverlay,\n  Tooltip,\n  Polyline,\n  Popup as MapPopup\n} from 'react-leaflet'\nimport style from './Style'\nimport ConnectionLine from './ConnectionLine'\nimport StationSelection from '../containers/StationSelection'\nimport InformationOverlay from './InformationOverlay'\nimport API from '../api'\nimport * as Utils from '../utils/utils'\nimport QRCode from 'qrcode.react'\n\nexport default class Popup extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      defaultLocation: null,\n      stationChosen: null,\n      mapCenter: props.closestStations && this.getStationLocation(props.closestStations[0]),\n      displayMarker: [],\n      connectionIndex: 0,\n      numDisplayConnection: 5,\n      value: '' // not the station chosen, for input field only\n    }\n    this.apiInstance = new API()\n  }\n  getStationLocation(station) {\n    return Utils.getStationLatLng(station)\n  }\n  onStationChosen(station) {\n    this.setState({...this.state,\n      stationChosen:station,\n      value: Utils.getStationName(station),\n      mapCenter: this.getStationLocation(station)})\n  }\n  setLocation() {\n    if(!this.state.stationChosen) return\n    let {latitude,longitude} = this.state.stationChosen\n    this.props.setLocation(latitude,longitude)\n  }\n  async onMapMoveEnd({center},zoom) {\n    let closestStationsToMapCenter = await this.apiInstance.getClosestStations(center[0],center[1],this.props.stations,15)\n    this.setState({...this.state,displayMarker:closestStationsToMapCenter})\n  }\n  getMap() {\n    return (\n      <Map\n        zoomControl={false}\n        onViewportChanged={this.onMapMoveEnd.bind(this)}\n        center={this.state.mapCenter}\n        zoom={11}\n        style={{height:\"60vh\"}}\n      >\n        {Utils.getMapTileLayer()}\n        {\n          this.state.displayMarker.map(station => (\n            <Marker key={station.id}\n              onClick={() => this.onStationChosen(station)}\n\n              position={this.getStationLocation(station)}\n            >\n              <Tooltip permanent>\n                <div>\n                  {Utils.getStationOverviewComponent(station)}\n                </div>\n\n              </Tooltip>\n            </Marker>)\n          )\n        }\n      </Map>\n    )\n  }\n  setConnectionIndex(i) {\n    this.setState({...this.state,connectionIndex: i})\n  }\n  onInputFieldChange(inputFieldState) {\n    this.setState({\n      value: inputFieldState.value,\n      mapCenter: inputFieldState.suggestions.length && this.getStationLocation(inputFieldState.suggestions[0])\n    })\n  }\n  // function that evaluates the distances between closest stations and the given station\n  getStationDistanceToLocation(dest) {\n    let currentStation = this.props.closestStations[0]\n    if (!currentStation) return 0 // wtf?\n    return Utils.getDistanceFromLatLonInKm(currentStation.latitude,currentStation.longitude,dest.latitude,dest.longitude).toFixed(2)\n\n  }\n  getConnectionAttributeComponent(conn,firstConn,isFirst) {\n    let Cell = (props) => (\n      <div className={props.className} style={{...props.style, display: 'flex',flexDirection: 'column',textAlign: 'center'}}>\n        <div style={{flex: 1}}>\n          <span className={`glyphicon glyphicon-${props.icon}`} aria-hidden=\"true\"></span> {props.title}\n        </div>\n        <div style={{flex: 1}}>\n          {props.val}\n        </div>\n        {\n          props.subval &&\n          <div style={{flex: 1}} className=\"text-danger\">\n            {props.subval}\n          </div>\n        }\n      </div>\n    ),\n    departure = Utils.unixTimeStampToDateHHMM(conn.departure),\n    duration = Utils.timeDifferenceFormatString(conn.departure,conn.arrival),\n    arrivalTime = Utils.unixTimeStampToDateHHMM(conn.arrival),\n\n    firstDeparture =  Utils.unixTimeStampToDateHHMM(firstConn.departure),\n    departureTimeDiff = Utils.timeDifferenceFormatString(firstConn.departure,conn.departure,true),\n    firstDuration = Utils.timeDifferenceFormatString(firstConn.departure,firstConn.arrival),\n    firstArrivalTime =  Utils.unixTimeStampToDateHHMM(firstConn.departure),\n    arrivalTimeDiff = Utils.timeDifferenceFormatString(firstConn.arrival,conn.arrival,true)\n    return (\n      <div style={{display: 'flex'}}>\n        <Cell\n          style={{flex: 1, borderRight: '1px solid white'}}\n          title=\"Departure\"\n          val={departure}\n          subval={!isFirst && `(${departureTimeDiff})`}\n          icon=\"time\"\n        />\n        <Cell\n          style={{flex: 1,borderLeft: '1px solid white'}}\n          title=\"Total time\"\n          val={duration}\n          icon=\"transfer\"\n        />\n        <Cell\n          style={{flex: 1}}\n          className=\"bg-info\"\n          title=\"Arrival\"\n          val={arrivalTime}\n          subval={!isFirst && `(${arrivalTimeDiff})`}\n          icon=\"flag\"\n        />\n      </div>\n    )\n\n  }\n  // main component for rendering the details to a destination\n  destinationDetailComponent() {\n    let dest = this.props.destinationDetail // as an alias\n    let connections = this.props.connections[dest.id] // may or may not be null!\n\n    let ConnectionOverviewComponent = (props) => (\n      <div style={{...props.style,display: 'flex'}} onClick={props.onClick}>\n        {/* First column*/}\n        <div style={{flex: 1, display: 'flex',justifyContent: 'center',alignItems: 'center'}}>\n          {Utils.unixTimeStampToDateHHMM(props.connection.departure)}\n        </div>\n        {/* Second column */}\n        <div style={{flex: 2, display: 'flex',alignItems: 'center',flexWrap: 'wrap'}}>\n          {Utils.getConnectionDisplayComponents(props.connection)}\n        </div>\n      </div>\n    )\n    return (\n      <Modal show={true} bsSize=\"lg\" onHide={this.props.onHide}>\n        <Modal.Header closeButton>\n          Connections to {dest.name}\n        </Modal.Header>\n        {\n          connections?(\n            <Modal.Body>\n              <div style={{display: 'flex',flexDirection: 'column'}}>\n                {/* First row is for station details, and time for earliest arrival*/}\n                <div style={{flex: 1,display:'flex'}}>\n                  {/* Basic info of the station, like name, latlng, product names...*/}\n                  <div style={{flex: 1}}> {/* First Column*/}\n                    {/* Name of station*/}\n                    <div style={{flex: 1,display: 'block', flexWrap: 'wrap'}}>\n                      <h2 style={{marginTop: 0}}>{dest.name} </h2>\n                    </div>\n                    {/* Auxillary info */}\n                    <div style={{flex: 1,display: 'flex',flexWrap: 'wrap'}}>\n                      <div>\n                        <span className=\"glyphicon glyphicon-map-marker\" aria-hidden=\"true\"></span>\n                        {this.getStationDistanceToLocation(dest)}km |\n                      </div>\n                      {Utils.getStationProductLineTags(dest)}\n                    </div>\n                  </div>\n                  <div style={{flex: 1}}> {/* Second Column */}\n                  {/* Get the fastest connection in this part*/}\n                    {this.getConnectionAttributeComponent(connections[this.state.connectionIndex],connections[0],this.state.connectionIndex == 0)}\n                  </div>\n                </div>\n                {/* Second row is for list of possible connections and map*/}\n                <div style={{flex: 1,display:'flex',minHeight: '50vh'}}>\n                  <div style={{flex:2}} >\n                    {/* List of connections*/}\n                    {\n                      connections.map((conn,i) => (\n                        <ConnectionOverviewComponent\n                          onClick={this.setConnectionIndex.bind(this,i)}\n                          style={(i == this.state.connectionIndex)?{background: 'rgba(255,255,255,0.5)'}:{}}\n                          connection={conn} />\n                      ))\n                    }\n                  </div>\n                  <div style={{flex: 3}}>\n                      <ConnectionLine connection={connections[this.state.connectionIndex]} />\n                  </div>\n                </div>\n              </div>\n            </Modal.Body>\n          ):\n          ( // no connection here\n            // TODO: prettify this\n            <InformationOverlay title=\"Fail to fetch connection...\" />\n            // <Label> Failed to fetch connection...</Label>\n          )\n        }\n\n      </Modal>\n    )\n  }\n  departureQRComponent() {\n    return (\n      <Modal show={true} bsSize=\"large\" onHide={this.props.onHide}>\n        <Modal.Header closeButton>\n          <Modal.Title> QR Code for this departure </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <QRCode size={Math.round(window.innerHeight * 0.8)} value={this.props.departureQR} />\n        </Modal.Body>\n      </Modal>\n    )\n  }\n  render() {\n    if(this.props.destinationDetail)\n      return this.destinationDetailComponent()\n    else if(this.props.departureQR)\n      return this.departureQRComponent()\n    else\n    return (\n      <Modal show={true} bsSize=\"large\" onHide={this.props.onHide}>\n        <Modal.Header closeButton>\n          <Modal.Title> Choose your location </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div style={style.modal.container}>\n            <div style={style.modal.inputField}>\n              <Form>\n                <FormGroup>\n\n                  <ControlLabel> Choose the station that is the closest to you:</ControlLabel>\n                  <StationSelection\n                    value={this.state.value}\n                    onChange={this.onInputFieldChange.bind(this)}\n                    onSelect={this.onStationChosen.bind(this)}/>\n                </FormGroup>\n              </Form>\n\n            </div>\n            <div style={style.modal.map}>\n              {this.getMap()}\n            </div>\n          </div>\n\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={this.setLocation.bind(this)}\n            disabled={this.state.stationChosen == null}\n            bsStyle=\"success\"> Change Location </Button>\n        </Modal.Footer>\n      </Modal>\n    )\n  }\n}\n","import { connect } from 'react-redux';\nimport Popup from '../components/Popup'\nimport * as LocationAction from '../actions/location'\nimport * as DestinationAction from '../actions/destination'\n\nfunction mapStateToProps(state) {\n  return {\n    closestStations: state.mvg.closest_stations,\n    stations: state.mvg.stations,\n    connections: state.mvg.connections,\n    connectionLines: state.mvg.connectionLines,\n    destinationDetail: state.destination.destinationDetail,\n    departureQR: state.mvg.departureQR\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setLocation: (lat,lng) => dispatch({type: LocationAction.SET_LOCATION,lat,lng}),\n    clearDestinationDetail: () => dispatch({type: DestinationAction.SHOW_DESTINATION_DETAIL, destination: null})\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Popup)\n","import React from 'react'\nimport style from './Style.js'\nimport {Glyphicon} from 'react-bootstrap'\nimport PropTypes from 'prop-types'\nexport default class ImageWithText extends React.Component {\n  getIcon() {\n    if(!this.props.glyphicon) return null\n    return <Glyphicon glyph={this.props.glyphicon} />\n  }\n  render() {\n    // let iwtStyle =\n    return (\n      <div onClick={this.props.onClick} style={{...style.imageWithText,opacity:this.props.opacity || 1}}>\n        {this.getIcon()}\n        <h4>{this.props.text}</h4>\n      </div>\n    )\n  }\n}\n\nImageWithText.propTypes = {\n  glyphicon: PropTypes.string,\n  text: PropTypes.string.isRequired,\n  opacity:PropTypes.number,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport style from './Style.js'\nimport LineTag from './LineTag'\nimport * as Utils from '../utils/utils'\n\nexport default class StationCard extends React.Component {\n  getDistance() {\n    if(!this.props.station) return 0\n    let {latitude,longitude} = this.props.station\n    let {lat,lng} = this.props\n    return Utils.getDistanceFromLatLonInKm(lat,lng,latitude,longitude).toPrecision(3)\n  }\n  getTransportTypeToken(type) {\n    let backgroundColor = Utils.getProductColorCode(type)\n    let shortName = Utils.getProductShortName(type)\n    return (\n      <LineTag backgroundColor={backgroundColor} line={shortName} />\n    )\n  }\n  render() {\n    return (\n      <div style={style.stationCard}>\n        <div style={style.stationCard.leftContainer}>\n          <h4> {Utils.getStationName(this.props.station)} </h4>\n          <div style={style.stationCard.leftContainer.tokenList}>\n            {this.props.station.products.map(this.getTransportTypeToken)}\n          </div>\n        </div>\n        <div style={style.stationCard.rightContainer}>\n          <h6>{this.getDistance()}km</h6>\n        </div>\n      </div>\n    )\n  }\n}\n\nStationCard.propTypes = {\n  station: PropTypes.object.isRequired,\n  lat: PropTypes.number.isRequired,\n  lng: PropTypes.number.isRequired\n}\n","import React from 'react'\nimport style from './Style.js'\nimport LineTag from './LineTag'\nimport PropTypes from 'prop-types'\nimport * as Utils from '../utils/utils'\nimport Glyphicon from 'react-bootstrap/lib/Glyphicon'\nimport _ from 'lodash'\nexport default class DepartureCard extends React.Component {\n\n  departureTime() {\n    return Utils\n      .unixTimeStampToDateHHMM(this.props.departure.departureTime)\n\n  }\n  isGone() {\n    let {hasPassed} = Utils.timeDifferenceToDateString(this.props.currentTime,this.props.departure.departureTime)\n    return hasPassed\n  }\n  timeLeft() {\n    if (this.isGone()) return <h6 style={{...style.centerContentStyle,color: \"red\"}}> Gone </h6>\n    let {hh,mm,ss} = Utils.timeDifferenceToDateString(this.props.currentTime,this.props.departure.departureTime)\n    let timestr\n    let pad = (s) => s.toString().padStart(2,'0')\n    if(hh > 0) timestr = `${pad(hh)}:${pad(mm)}:${pad(ss)}`\n    else timestr = `${pad(mm)}:${pad(ss)}`\n    return [\n      (\n        <div style={style.centerContentStyle}>\n          <Glyphicon glyph=\"time\" />\n        </div>\n\n      ),\n      <h5 style={style.centerContentStyle}>{timestr}</h5>\n    ]\n  }\n  lineTag() {\n    return (\n      <LineTag\n        backgroundColor={Utils.getColor(this.props.departure.label)}\n        line={this.props.departure.label}\n      />\n    )\n  }\n  onClick() {\n    if(!this.props.watching && !this.isGone()) this.props.watchDeparture(this.props.departure)\n  }\n\n  // now here are some sort of maths...\n  /*\n    This function takes the remaining time and distance between current station and station of departure,\n    and return the PROBABILITY of reaching the station ON OR BEFORE the departure time\n\n    - first we take the average speed of human walking : 3.1mph (first result from Google...:https://www.reference.com/health/average-human-walking-speed-8df1ec5d0858683e)\n    - then we take some standard deviation (which is an assumption) and model the probability distribution of the SPEED of the user (myself...?) as normal distribution\n    - now we evaluate the PROBABILITY of arrive successfully\n        = p(arrive before departure)\n        = integrate(slowest_speed_to_catch departure, inf)\n        where slowest_speed_to_catch_departure = distance / (departure_time - current_time)\n\n\n  */\n  getSuccessfulCatchPercentage() {\n    // TODO: this\n    return 1.0\n  }\n  showQRCode() {\n    // prepare the qr code for the serialised departure\n    const qr = btoa(\n      JSON.stringify(\n        _.pick(this.props.departure,\n          'id,departureTime,label,destination'.split(',')\n        )\n      )\n    )\n    this.props.showQR(qr)\n  }\n  getSEVStyle() {\n    if(this.props.departure.sev) {\n      return {\n        color: '#962984'\n      }\n    } else return {}\n  }\n  getLiveDepartureColor() {\n    if(this.props.departure.live) {\n      return {\n        color: 'green'\n      }\n    } else {\n      return {}\n    }\n  }\n  render() {\n    return (\n      <div\n        onClick={this.onClick.bind(this)}\n        style={{...style.departureCard,opacity: (this.isGone())?0.5:1}}>\n        <div style={{...style.departureCard.leftColumn,...this.getLiveDepartureColor()}}>\n          {this.timeLeft()}\n        </div>\n\n        <div style={style.departureCard.middleColumn}>\n          <div style={style.departureCard.middleColumn.upperRow}>\n            {this.lineTag()}\n            <div style={this.getSEVStyle()}>{this.props.departure.destination}</div>\n          </div>\n          <div style={style.departureCard.middleColumn.lowerRow}>\n            from <b>{this.props.departure.from.name}</b>\n          </div>\n        </div>\n\n        <div style={style.departureCard.rightColumn}>\n          <div style={style.departureCard.rightColumn.upperRow}>\n            {this.departureTime()}\n          </div>\n        </div>\n        {\n          /* For the watching part*/\n          this.props.watching && (\n            <div style={style.departureCard.rightColumn}>\n              <div style={style.departureCard.rightColumn.center}>\n                <div onClick={this.showQRCode.bind(this)}>\n                  <Glyphicon glyph=\"qrcode\" />\n                </div>\n              </div>\n              <div style={style.departureCard.rightColumn.center}>\n                <div onClick={this.props.removeWatchingDeparture}>\n                  <Glyphicon glyph=\"remove\" />\n                </div>\n              </div>\n            </div>\n          )\n        }\n      </div>\n    )\n  }\n}\n\nexport class DepartureListHeader extends React.Component {\n  render() {\n    return (\n      <div style={{...style.departureCard,width: '100%'}}>\n        <div style={{...style.departureCard.leftColumn,display: 'flex', alignItems: 'center',justifyContent: 'center'}}>\n          Time Left\n        </div>\n\n        <div style={{...style.departureCard.middleColumn,display: 'flex', alignItems: 'center',justifyContent: 'center'}}>\n          Departure\n        </div>\n\n        <div style={style.departureCard.rightColumn}>\n          <div style={{...style.departureCard.rightColumn.upperRow,display: 'flex', alignItems: 'center',justifyContent: 'center'}}>\n            Time\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nDepartureCard.propTypes = {\n  departure: PropTypes.object.isRequired,\n  currentTime: PropTypes.object.isRequired,\n  closestStations: PropTypes.object.isRequired,\n\n}\n","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport DepartureCard from '../components/DepartureCard'\nimport {\n  WATCH_DEPARTURE,\n  SHOW_QR\n} from '../actions/mvg'\n\nfunction mapStateToProps(state) {\n  return {\n    currentTime: state.clock.currentTime,\n    closestStations: state.mvg.closest_stations,\n  }\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    watchDeparture: (departure) => dispatch({\n      type: WATCH_DEPARTURE,\n      departure\n    }),\n    removeWatchingDeparture: () => dispatch({\n      type: WATCH_DEPARTURE,\n      departure: null\n    }),\n    showQR: (qr) => dispatch({\n      type: SHOW_QR,\n      qr\n    })\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(DepartureCard)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport style from './Style.js'\nimport LineTag from './LineTag'\nimport Autosuggest from 'react-autosuggest';\nimport * as Utils from '../utils/utils'\nimport StationSelection from '../containers/StationSelection'\nimport {\n  Well,\n  Button,\n  Form,\n  FormGroup,\n  InputGroup,\n  Glyphicon,\n  ControlLabel,\n  Col,\n  Label\n} from 'react-bootstrap'\nexport default class DestinationCard extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      value: '',\n      suggestions: [],\n    }\n\n  }\n  getConnections() {\n    // first check if we have \"fastest connection\" at all..\n    let id = this.props.station.id\n    if(!this.props.connections[id]) return null\n    // get the list of our connections, then get the fastest one\n    let connections = this.props.connections[id]\n      .filter(conn => conn.departure > this.props.currentTime) // at least the train should still be here...\n      .sort((conA,conB) => conA.arrival - conB.arrival)\n      return connections\n\n  }\n  // this is a \"placeholder\" for the connections when the requested one is not available\n  getConnectionLoadingComponent() {\n    return (<Label bsStyle=\"info\"> Fetching connections... </Label>)\n  }\n  // get the n-th connection component, sorted by time of ARRIVAL\n  getConnectionDisplayComponents(n){\n    let connections = this.getConnections()\n    if(!connections || n >= connections.length) return this.getConnectionLoadingComponent()\n\n    let connection = connections[n]\n\n    return Utils.getConnectionDisplayComponents(connection)\n\n  }\n  // if theres a connection for this dest,\n  // return something like u1 -> s3 -> ...\n  getFastestConnectionDisplayComponents() {\n    return this.getConnectionDisplayComponents(0)\n  }\n\n\n  // onBlur = () => {\n  //   this.props.onBlur && this.props.onBlur()\n  // }\n  getTravelTimeComponent() {\n    let connections = this.getConnections()\n    if(!connections || !connections.length ) return null\n    let connection = connections[0] // will change to arbitrary connections later\n    let fromTime = Utils.unixTimeStampToDateHHMM(connection.departure),\n        toTime = Utils.unixTimeStampToDateHHMM(connection.arrival),\n        remainTime = Utils.timeDifferenceToDateHHMMSS(this.props.currentTime,connection.departure),\n        content = ` ${fromTime} - ${toTime}`\n    return (\n      <div style={style.destinationCard.upperRow.right}>\n        <div style={style.destinationCard.upperRow.right.up}>\n          <h4>{toTime}</h4>\n        </div>\n        <div style={style.destinationCard.upperRow.right.down}>\n          <h6>Depart in {remainTime}</h6>\n        </div>\n      </div>\n\n    )\n  }\n\n  render() {\n    const { value, suggestions } = this.state\n    const inputProps = {\n      placeholder: \"Give a station name\",\n      value,\n      onChange: this.onChange,\n      onBlur: this.onBlur\n    }\n    if(this.isEdit())\n\n    return (\n      <Well bsSize=\"large\">\n        <Form horizontal>\n          <FormGroup>\n            <Col componentClass={ControlLabel} sm={2}>\n              Station:\n            </Col>\n            <Col sm={10}>\n              <StationSelection onSelect={this.props.onSelect} />\n            </Col>\n\n          </FormGroup>{' '}\n          <Button block type=\"submit\" onClick={this.props.onCancel}>\n            Cancel\n          </Button>\n        </Form>\n\n      </Well>\n    )\n    // component that renders travel time of this connection\n    return (\n\n        <div style={style.destinationCard} onClick={!this.props.isRemoving && this.props.onClick}>\n          <div style={style.destinationCard.upperRow}>\n            <div style={style.destinationCard.upperRow.left}>\n              {!this.props.isRemoving && <h6>to</h6>} <h4 style={style.destinationCard.upperRow.left.name}> {this.props.station.name} </h4>\n            </div>\n            {this.props.isRemoving?this.getRemoveComponent():this.getTravelTimeComponent()}\n          </div>\n          { !this.props.isRemoving &&\n            (<div style={style.destinationCard.lowerRow}>\n              {this.getFastestConnectionDisplayComponents()}\n            </div>)\n          }\n        </div>\n\n    )\n  }\n  isEdit() {\n    return !this.props.station\n  }\n  getRemoveComponent() {\n    return (\n      <div style={style.destinationCard.upperRow.remove}>\n        <Button bsStyle=\"danger\" onClick={this.props.onRemove}>\n          <Glyphicon glyph=\"trash\" />\n        </Button>\n      </div>\n    )\n  }\n}\n\n// DestinationCard.propTypes = {\n//   station: PropTypes.object,\n//   isEditing: PropTpes.boolean,\n//\n// }\n","import { connect } from 'react-redux';\nimport DestinationCard from '../components/DestinationCard'\n\nfunction mapStateToProps(state) {\n  return {\n    currentTime: state.clock.currentTime,\n    stationsList: state.mvg.stations,\n    destinations: state.destination.destinations,\n    connections: state.mvg.connections\n  }\n}\n\nexport default connect(mapStateToProps,null)(DestinationCard)\n","import React from 'react'\nimport style from './Style.js'\nimport ImageWithText from './ImageWithText'\nimport DestinationCard from '../containers/DestinationCard'\nimport * as DestinationAction from '../actions/destination'\nimport * as Utils from '../utils/utils'\nimport {\n  Button,\n  ButtonGroup,\n  Pagination,\n} from 'react-bootstrap'\nimport Glyphicon from 'react-bootstrap/lib/Glyphicon'\nimport {\n  Map,\n  TileLayer,\n  Marker,\n  Popup,\n  Polyline,\n  Tooltip,\n  Circle\n} from 'react-leaflet'\n\nexport default class DestinationList extends React.Component {\n\n  constructor(props) {\n    super(props)\n    // an enum for representing display mode of the destinations\n    this.displayMode = {\n      LIST: 1,\n      MAP: 2,\n    }\n    this.state = {\n      numDestinationShown: 2,\n      currentPage: 1,\n      isAddingNewDestination: false,\n      isRemoving: false,\n      selectedConnection: null,\n      selectedPart: null,\n      displayMode: this.displayMode.LIST,\n    }\n    // get destinations and they will be stored in the store\n    this.props.getDestinations()\n\n  }\n  componentWillReceiveProps(nextProps) {\n    if(nextProps.destinations.length == 0 && this.state.isRemoving) {\n      // \"remove all\" button is pressed\n      // bounce back to non-removing mode\n      this.setState({...this.state,isRemoving: false,currentPage: 1})\n    }\n  }\n  getConnections(station) {\n    let id = station.id\n    let connections = this.props.connections[id]\n    if(!connections || !connections.length) return null\n    connections = connections\n      .filter(conn => !!conn && conn.departure > this.props.currentTime)\n      .sort((conA,conB) => conA.arrival - conB.arrival)\n    return connections\n  }\n  getConnectionTooltipRemainingDepartureTime(station) {\n    let connections = this.getConnections(station)\n    if(!connections || !connections[0]) return 'N/A'\n    let connection = connections[0]\n    return Utils.timeDifferenceToDateHHMMSS(this.props.currentTime,connection.departure)\n\n  }\n  getArrivalTime(station,i = 0) {\n    let connections = this.getConnections(station)\n    if(!connections || !connections[i]) return 'N/A'\n    return Utils.unixTimeStampToDateHHMM(connections[i].arrival)\n  }\n  getTravelTime(station,i = 0) {\n    let connections = this.getConnections(station)\n    if(!connections || !connections[i]) return 'N/A'\n    return Utils.timeDifferenceFormatString(connections[i].departure,connections[i].arrival)\n  }\n  /*\n    Given a part, compute its opacity,\n    this can be determined by which line the user is selecting\n  */\n  getOpacityForLine(part) {\n    // TODO: coorperate with station selection as well\n    // return 1.\n    if(!this.state.selectedPart && !this.state.selectedConnection)\n      return 1. // no specific connections are selected, just go for 1\n    if(!this.state.selectedConnection)\n      return (this.state.selectedPart.label === part.label)?1.:0.5 // suppress non-selected part opacity when there are some other parts selected\n\n    if(!this.state.selectedPart) {\n      // then its selectedConnection thats true...\n      if(this.state.selectedConnection.connectionPartList.find(\n        conn =>  conn.from.id === part.fromStationId\n          && conn.to.id   === part.toStationId\n      )) return 1.\n      return 0.5\n    }\n  }\n  /*\n    Triggered when a part of the line is being pointed at\n  */\n  onLineMouseOver(part) {\n    this.setState({...this.state,selectedPart: part})\n  }\n  clearLineHighlight() {\n    this.setState({...this.state,selectedPart: null})\n  }\n  highlightLinesToStation(dest) {\n    let connections = this.getConnections(dest)\n    if(!connections || !connections[0]) return // cannot get connections :(\n    let connection = connections[0]\n\n    this.setState({...this.state,selectedConnection: connection})\n  }\n  clearHighlightsToStation() {\n    this.setState({...this.state,selectedConnection: null})\n  }\n  // the \"map\" mode component\n  // which displays the fastest route to the destination\n  getMap() {\n    if(!this.props.closest_stations) return\n    let station = this.props.closest_stations[0]\n    let lat = station.latitude,\n        lng = station.longitude\n    return (\n      <Map\n        zoomControl={false}\n        center={[lat,lng]}\n        zoom={11}\n        style={{height: \"100%\",width: \"100%\"}}\n      >\n        <TileLayer\n          url='https://cartodb-basemaps-{s}.global.ssl.fastly.net/rastertiles/voyager/{z}/{x}/{y}{r}.png'\n        />\n\n        <Marker\n          position={[lat,lng]}\n          draggable={false}\n        >\n          <Tooltip>\n            You are here\n          </Tooltip>\n        </Marker>\n        <Circle radius={2000} center={[lat,lng]}>\n        </Circle>\n\n        {this.props.destinations.map(dest => (\n          <Marker\n            draggable={false}\n            position={[dest.latitude,dest.longitude]}\n            onMouseOver={this.highlightLinesToStation.bind(this,dest)}\n            onMouseOut={this.clearHighlightsToStation.bind(this)}\n            onClick={this.props.showDestinationDetail.bind(this,dest)}\n          >\n            <Tooltip permanent>\n              <div style={style.tooltip.container}>\n                <div style={style.tooltip.container.overview}>\n                  {\n                    // Utils.getStationOverviewComponent(dest)\n                    dest.name\n                  }\n                </div>\n                <div style={style.tooltip.container.departureTime}>\n                  <div style={style.tooltip.container.departureTime.left}>\n                    <Glyphicon glyph=\"time\" />\n                    {this.getConnectionTooltipRemainingDepartureTime(dest)}\n                  </div>\n\n                  <div style={style.tooltip.container.departureTime.center}>\n                    <Glyphicon glyph=\"flag\" />\n                    {this.getArrivalTime(dest)}\n                  </div>\n\n                  <div style={style.tooltip.container.departureTime.right}>\n                    <Glyphicon glyph=\"transfer\" />\n                    {this.getTravelTime(dest)}\n                  </div>\n                </div>\n              </div>\n            </Tooltip>\n          </Marker>\n        ))}\n\n        {\n          // convert the computed coords into line segments\n          Object.values(this.props.connectionLines)\n            .map(part => (\n              <Polyline\n                opacity={this.getOpacityForLine(part)}\n                color={Utils.getColor(part.label)}\n                onMouseOver={this.onLineMouseOver.bind(this,part)}\n                onMouseOut={this.clearLineHighlight.bind(this)}\n                positions={part.coords}\n              >\n                <Tooltip>\n                  {part.label}\n                </Tooltip>\n              </Polyline>\n            ))\n\n        }\n      </Map>\n    )\n  }\n  header() {\n    // if(this.props.destinations.length == 0 && !this.state.isAddingNewDestination) return null\n    let buttons = Object.values(this.displayMode).map(mode => {\n      const glpyhButton = (mode,glyph) => (\n        <Button onClick={this.setDisplayMode.bind(this,mode)} bsSize=\"small\">\n          <Glyphicon glyph={glyph} />\n        </Button>\n      )\n      switch(mode) {\n        case this.displayMode.LIST:\n          return glpyhButton(mode,\"list\")\n        case this.displayMode.MAP:\n          return glpyhButton(mode,\"map-marker\")\n        default:\n          return null\n      }\n    }) // initial list of group\n    if(!this.state.isRemoving) {\n      buttons = buttons.concat((\n        <Button bsSize=\"small\" bsStyle=\"danger\" onClick={this.removeDestinations.bind(this)}>\n          Remove\n        </Button>\n      ))\n    } else {\n      buttons = buttons.concat(\n          [<Button bsSize=\"small\" bsStyle=\"danger\" onClick={this.clearDestinations.bind(this)}>\n           Remove All\n          </Button>,\n          <Button bsSize=\"small\" onClick={this.cancelRemoveDestinations.bind(this)}>\n           Cancel\n          </Button>]\n        )\n\n    }\n    return (\n      <div style={style.destinationList.header}>\n        <h2> Destinations </h2>\n        {\n          this.props.destinations.length > 0 &&\n          (\n            <ButtonGroup>\n              {buttons}\n            </ButtonGroup>\n          )\n        }\n\n      </div>\n    )\n  }\n  removeDestinations() {\n    this.setState({\n      ...this.state,\n      isRemoving: true,\n      currentPage:1, // need to go to the first page otherwise nothing is shown...\n      displayMode: this.displayMode.LIST, // have to switch it back to list for delection - make it simple:)\n      numDestinationShown: 5, // can show more as its slimmer\n      isAddingNewDestination: false})\n  }\n  cancelRemoveDestinations() {\n    this.setState({\n      ...this.state,\n      numDestinationShown: 3, // cannot show more as its bigger..\n      isRemoving: false})\n  }\n  clearDestinations(e) {\n    e.preventDefault()\n    this.props.clearDestinations()\n  }\n  displayAddDestinationCell() {\n    if(this.state.isAddingNewDestination) return\n    this.setState({...this.state,isAddingNewDestination: true})\n\n  }\n  cancelAdd() {\n    this.setState({...this.state,isAddingNewDestination: false})\n  }\n  editComponent() {\n    return (\n      <DestinationCard isEditing={true}\n        onCancel={this.cancelAdd.bind(this)}\n        onSelect={this.addDestination.bind(this)}\n      />\n    )\n  }\n  addDestination(station) {\n\n    this.props.addDestination(station)\n    this.setState({isAddingNewDestination: false})\n  }\n  addNewDestinationButton() {\n    return <ImageWithText onClick={this.displayAddDestinationCell.bind(this)} opacity={0.5} glyphicon=\"plus\" text=\"Click to add a new destination\" />\n  }\n\n  destinationComponents() {\n    let indexFrom = this.state.numDestinationShown * (this.state.currentPage - 1)\n    let indexTo = indexFrom + this.state.numDestinationShown\n    return (\n      <div style={style.destinationList.destinationContainer}>\n        {this.props.destinations\n          .map(dest => (\n            <DestinationCard\n              key={dest.id}\n              isEditing={false}\n              onClick={this.props.showDestinationDetail.bind(this,dest)}\n              onRemove={() => this.props.removeDestination(dest)}\n              isRemoving={this.state.isRemoving}\n              station={dest}\n            />\n          ))\n          // lol!\n          .concat(this.state.isAddingNewDestination?this.editComponent():null)\n          .concat(this.state.isRemoving?null:this.addNewDestinationButton())\n          .filter(component => !!component) // not null\n          .slice(indexFrom,indexTo)\n        }\n      </div>\n    )\n  }\n  paginationComponent() {\n    let numComponents = this.props.destinations.length\n    if(!this.state.isRemoving) numComponents++ // with add new component\n    if(this.state.isAddingNewDestination) numComponents++\n    let numPageNeeded = Math.ceil(numComponents / this.state.numDestinationShown)\n    if(numPageNeeded <= 1) return null // why do you need pagination if theres just a page..?\n    return (\n      <div style={style.destinationList.pagination}>\n        <Pagination>\n          {Utils.listOfN(numPageNeeded).map(n =>\n            <Pagination.Item onClick={() => this.setState({...this.state,currentPage: n})}> {n} </Pagination.Item>\n          )}\n        </Pagination>\n      </div>\n    )\n  }\n\n  setDisplayMode(mode) {\n    // check whether mode is value\n    if(Object.values(this.displayMode).indexOf(mode) == -1) return\n    this.setState({...this.state,displayMode: mode,isRemoving: this.state.isRemoving && mode != this.displayMode.MAP})\n  }\n\n  getDisplayComponents() {\n    switch(this.state.displayMode) {\n      case this.displayMode.LIST:\n        return [\n          this.destinationComponents(),\n          (this.props.destinations.length && this.paginationComponent()) || null\n        ]\n      case this.displayMode.MAP:\n        return this.getMap()\n\n      default:\n        return null\n    }\n  }\n\n  render() {\n    return (\n      <div style={style.mainContainer.leftContainer.bottomContainer}>\n        {this.header()}\n        {this.getDisplayComponents()}\n      </div>\n    )\n  }\n}\n","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport DestinationListComponent from '../components/DestinationList'\nimport * as DestinationAction from '../actions/destination'\nimport * as MVGAction from '../actions/mvg'\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.destination,\n    closest_stations: state.mvg.closest_stations,\n    stations: state.mvg.stations, // also give the list of stations to choose from\n    connections: state.mvg.connections, // so that the card knows what to render for connections\n    currentTime: state.clock.currentTime,\n    lines: state.mvg.lines,\n    connectionLines: state.mvg.connectionLines\n  }\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getDestinations: () => dispatch({type: DestinationAction.GET_DESTINATION}),\n    addDestination: (dest) => dispatch({type: DestinationAction.ADD_DESTINATION,station: dest}),\n    clearDestinations: () => dispatch({type: DestinationAction.CLEAR_DESTINATION}),\n    removeDestination: (dest) => dispatch({type: DestinationAction.REMOVE_DESTINATION,destination:dest}),\n    refereshRoute: (target_station_id) => dispatch({type: DestinationAction.GET_DESTINATION,target_station_id}),\n    getLineInfo: (line) => dispatch({type: MVGAction.GET_LINE,line}),\n    showDestinationDetail: (destination) =>\n      dispatch({\n        type: DestinationAction.SHOW_DESTINATION_DETAIL,\n        destination\n      })\n    // computeLineSegment: (connection,lines) => dispatch({type: MVGAction.COMPUTE_LINE_SEGMENT,connection,lines})\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(DestinationListComponent)\n","// @flow\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  Navbar,\n  NavItem,\n  NavDropdown,\n  MenuItem,\n  Nav,\n  Label,\n  Pagination,\n  Well,\n  FormGroup,\n  ControlLabel,\n  Glyphicon,\n  Modal,\n\n  DropdownButton,\n} from 'react-bootstrap'\nimport style from './Style.js';\nimport DetailsPopup from '../containers/Popup'\nimport ImageWithText from './ImageWithText'\nimport InformationOverlay from './InformationOverlay'\nimport StationCard from './StationCard'\nimport DepartureCard from '../containers/DepartureCard'\nimport StationSelection from './StationSelection'\nimport DestinationList from '../containers/DestinationList'\nimport {DepartureListHeader} from '../components/DepartureCard'\nimport * as Utils from '../utils/utils'\nimport _ from 'lodash'\nimport LineTag from './LineTag'\nimport {Map, TileLayer, Marker, Popup} from 'react-leaflet'\ntype Props = {};\n\nexport default class Home extends Component<Props> {\n  props: Props;\n  constructor(props) {\n    super(props)\n\n    // filter value, in minutes\n    this.timeFilter = [1,3,5,10,15,20,30,40,60]\n    this.state = {\n      numDeparturesShown: 3,\n      departurePage: 1,\n      showPopup: false,\n\n      filterLabel: null,\n      timeFilter: null,\n    }\n  }\n  getNextRefreshTime() {\n    let remainder = this.props.clock % 60\n    if(remainder == 0) return 0\n    return 60 - remainder\n  }\n  getNextRefreshComponent() {\n    let nextRefreshTime = this.getNextRefreshTime()\n    let content\n\n    if(!this.props.shouldUpdate)\n      content = `Refresh Paused (${this.getNextRefreshTime()})`\n    else if(nextRefreshTime == 0)\n      content = (<Label bsStyle=\"success\">Refreshing...</Label>)\n    else\n      content = `Next refresh in : ${this.getNextRefreshTime()} second(s)`\n\n    return (\n      <NavItem onClick={this.props.toggleUpdate}>\n        {content}\n      </NavItem>\n    )\n  }\n  navBar() {\n    return (\n      <Navbar fluid>\n        <Navbar.Header>\n          <Navbar.Brand>\n            MVG Dashboard\n          </Navbar.Brand>\n        </Navbar.Header>\n        <Navbar.Collapse>\n          <Nav>\n          {\n            this.isStationLoaded() && this.getNextRefreshComponent()\n          }\n\n          </Nav>\n          <Nav pullRight>\n            {\n              this.props.error && (\n                <NavItem disabled>\n                  <Label bsStyle=\"success\">Error: {this.props.error.toString()}</Label>\n                </NavItem>\n              )\n            }\n            {this.getConnectivityComponent()}\n            <NavItem onClick={this.selectLocation.bind(this)} style={style.navBar.location}>\n              {(this.props.closest_stations.length && this.props.closest_stations[0].name) || null}\n              <span className=\"glyphicon glyphicon-map-marker\" />\n            </NavItem>\n            <NavItem eventKey={1} href=\"#\">\n              {this.props.currentTime.toLocaleString()}\n            </NavItem>\n\n          </Nav>\n\n\n        </Navbar.Collapse>\n\n      </Navbar>)\n  }\n  getConnectivityComponent() {\n    const endpointNameToStateDict = {\n      \"MVG\": this.props.mvg_status,\n      \"MVV\": this.props.mvv_status,\n      \"Backend\": this.props.backend_status,\n      \"Proxy\": this.props.proxy_status,\n    }\n    // calculate the number of failed connection\n    const numFails = Object.values(endpointNameToStateDict).reduce((a,v) => v?a:(a + 1), 0)\n    const getGlyphByStatus = (ok) => (\n      ok? <Glyphicon glyph=\"ok\" /> : <Glyphicon glyph=\"remove\" />\n    )\n    return (\n      <NavDropdown title={numFails?`${numFails} failed`: \"Connected\"}>\n        {Object.keys(endpointNameToStateDict).map(name => (\n          <MenuItem key={name}>\n            <div style={style.stationSelection}>\n              <div style={style.stationSelection.labels}>\n                {name}\n              </div>\n              <div style={style.stationSelection.name}>\n                {getGlyphByStatus(endpointNameToStateDict[name])}\n              </div>\n            </div>\n          </MenuItem>\n        ))}\n      </NavDropdown>\n    )\n  }\n  isStationLoaded() {\n    return this.props.stations && this.props.stations.length > 0\n  }\n  loadingOverlay() {\n    let props = {}\n    if(!this.props.error) {\n      props = {\n        overlayType: \"loading\",\n        title: \"Loading Stations from MVG...\"\n      }\n    } else {\n      props = {\n        overlayType: \"error\",\n        title: this.props.error.toString()\n      }\n    }\n    return (\n      <InformationOverlay {...props} />\n    )\n  }\n  getMap() {\n    return null\n    if(!this.props.closest_stations || !this.props.closest_stations.length) return\n    let station = this.props.closest_stations[0]\n    let lat = station.latitude,\n        lng = station.longitude\n    //\n    return (\n      <Map\n        zoomControl={false}\n        center={[lat,lng]}\n        zoom={13}\n        opacity={0.7}\n        draggable={false}\n        style={{position: \"absolute\",top: 0,left:0, right: 0, bottom: 0, opacity: 0.5}}\n      >\n        <TileLayer\n          url=\"https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}{r}.png\"\n        />\n        {this.props.closest_stations.map(s => (\n          <Marker\n            key={s.name}\n            opacity={0.7}\n            draggable={false}\n            position={[s.latitude,s.longitude]}\n          >\n            <Popup>\n              {s.name}\n            </Popup>\n          </Marker>\n        ))}\n      </Map>\n    )\n  }\n\n  selectLocation() {\n    this.setState({...this.state,showPopup: true})\n  }\n  hidePopup() {\n    this.setState({...this.state,showPopup: false})\n    // clear the destination detail so that the popup will close\n    this.props.clearDestinationDetail()\n    // clear the qr so that the popup will close\n    this.props.clearDepartureQR()\n  }\n  // the component that renders the departure\n  watchingDepatureComponent() {\n    return (\n      <div style={style.watchingDeparture}>\n        <DepartureCard\n          watching={true}\n          departure={this.props.watchingDepature}>\n        </DepartureCard>\n      </div>\n    )\n  }\n  leftContainer() {\n    if(this.props.closest_stations.length == 0) return null\n    let closestStation = this.props.closest_stations[0]\n\n    if (!this.props.isChangingLocation)\n    return (\n      <div style={style.mainContainer.leftContainer}>\n        {\n          this.props.watchingDepature && this.watchingDepatureComponent()\n        }\n        <DestinationList />\n\n      </div>\n    )\n\n    // input field for changing location\n    return (\n      <StationSelection />\n    )\n  }\n\n  closestStationList() {\n    if(!this.props.closest_stations || !this.props.closest_stations.length) return (\n      <div style={style.centerContentStyle}>\n        <h5> No stations around </h5>\n      </div>\n    )\n    let headerElement = <h3> Stations Nearby </h3>\n    let stationElements = this.props.closest_stations\n      .map(s => <StationCard station={s} lat={this.props.lat} lng={this.props.lng} />)\n      .slice(1)\n    return [\n      headerElement,\n      ...stationElements\n    ]\n  }\n  getFilteredDepartureList() {\n    return this.props.departures\n    .filter(dept => !this.state.filterLabel || (dept.label && this.state.filterLabel === dept.label )) // filter according to the selected label to filter\n    .filter(dept => !this.state.timeFilter || (dept.departureTime - this.props.currentTime) / (1000 * 60) > this.state.timeFilter)\n  }\n  departureList() {\n    if(!this.getFilteredDepartureList().length) return (\n      <ImageWithText glyphicon=\"exclamation-sign\" text=\"No departures nearby or no matched departures found.\" opacity={0.8} />\n    )\n    let indexFrom = this.state.numDeparturesShown * (this.state.departurePage - 1)\n    let indexTo = Math.min(this.props.departures.length,indexFrom + this.state.numDeparturesShown)\n    return this.getFilteredDepartureList()\n      .slice(indexFrom,indexTo)\n      .map(departure => <DepartureCard departure={departure} />)\n  }\n  getDeparturePagination() {\n    // you dont need a pager\n    const fullDepartureList = this.getFilteredDepartureList()\n    if(fullDepartureList.length <= this.state.numDeparturesShown) return null\n    let numPageNeeded = Math.floor(fullDepartureList.length / this.state.numDeparturesShown)\n    return (\n      <Pagination>\n        {Utils.listOfN(numPageNeeded).map(n => <Pagination.Item active={this.state.departurePage == n} onClick={() => this.setState({...this.state,departurePage: n})}>{n}</Pagination.Item>)}\n      </Pagination>\n    )\n  }\n  filterLabel(lbl) {\n    this.setState({\n      filterLabel: lbl,\n      departurePage: 1 // always goes to the first page when filter changes\n    })\n  }\n  departureLineFilterDropdownList() {\n    const lblFilterOptions = _.uniq(this.props.departures.map(d => d.label)).map((lbl,i) => (\n      <MenuItem key={i} eventKey={lbl} onSelect={this.filterLabel.bind(this)}>\n        <div style={style.stationSelection}>\n          <div style={style.stationSelection.labels}>\n            <LineTag backgroundColor={Utils.getColor(lbl)} line={lbl} />\n\n          </div>\n          <div style={style.stationSelection.name}>\n            {lbl}\n          </div>\n        </div>\n\n      </MenuItem>\n    ))\n    return [\n      (\n        <MenuItem key={-1} envetKey={null} onSelect={this.filterLabel.bind(this)}>\n          <div style={style.stationSelection}>\n            <div style={style.stationSelection.labels}>\n              <Glyphicon glyph=\"remove\"></Glyphicon>\n            </div>\n            <div style={style.stationSelection.name}>\n              No filter\n            </div>\n          </div>\n        </MenuItem>\n      ),\n      ...lblFilterOptions,\n    ]\n  }\n  departureTimeFilterDropdownList() {\n    const timeOptions = this.timeFilter.map((t,i) => (\n      <MenuItem key={i} eventKey={t} onSelect={this.filterTime.bind(this)}>\n        <div style={style.stationSelection}>\n          <div style={style.stationSelection.labels}>\n            >{t}\n          </div>\n          <div style={style.stationSelection.name}>\n            minutes\n          </div>\n        </div>\n      </MenuItem>\n    ))\n    return [\n      (\n        <MenuItem key={-1} envetKey={null} onSelect={this.filterTime.bind(this)}>\n          <div style={style.stationSelection}>\n            <div style={style.stationSelection.labels}>\n              <Glyphicon glyph=\"remove\"></Glyphicon>\n            </div>\n            <div style={style.stationSelection.name}>\n              No filter\n            </div>\n          </div>\n        </MenuItem>\n      ),\n      ...timeOptions\n    ]\n  }\n  filterTime(t) {\n    this.setState({\n      timeFilter: t,\n      departurePage: 1,\n    })\n  }\n  rightContainer() {\n    if(this.props.closest_stations.length == 0) return null\n    return (\n      <div style={style.mainContainer.rightContainer}>\n        <div style={style.mainContainer.rightContainer.topContainer}>\n            <h2 style={{paddingRight: 16}}>Departures</h2>\n            {\n              this.props.departures.length &&\n              ([\n                (\n                  <DropdownButton title={this.state.filterLabel || \"Label filter\"} bsSize=\"small\">\n                    {this.departureLineFilterDropdownList()}\n                  </DropdownButton>\n                ),\n                (\n                  <DropdownButton\n                    title={(this.state.timeFilter && `>${this.state.timeFilter} minute(s)`) || \"Time Filter\"}\n                    bsSize=\"small\"\n                  >\n                    {this.departureTimeFilterDropdownList()}\n                  </DropdownButton>\n                )\n              ]) || null\n            }\n\n        </div>\n\n        <div style={style.mainContainer.rightContainer.middleContainer}>\n          {this.departureList()}\n        </div>\n\n        <div style={style.mainContainer.rightContainer.bottomContainer}>\n          {this.getDeparturePagination()}\n        </div>\n      </div>\n    )\n  }\n  popup() {\n    return (\n      <DetailsPopup onHide={this.hidePopup.bind(this)} />\n    )\n  }\n  render() {\n    return (\n      <div style={style.app}>\n        {(!this.isStationLoaded()) && this.loadingOverlay()}\n        {this.navBar()}\n        {/* Some more usage of the popup: show destination details...*/}\n        {(this.state.showPopup || this.props.destinationDetail || this.props.departureQR) && this.popup()}\n        <div style={style.mainContainer}>\n          {this.leftContainer()}\n          {this.rightContainer()}\n          {this.getMap()}\n        </div>\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport Home from '../components/Home';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as ClockAction from '../actions/clock'\nimport * as LocationAction from '../actions/location'\nimport * as DestinationAction from '../actions/destination'\nimport * as MVGAction from '../actions/mvg'\ntype Props = {};\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.clock,\n    ...state.mvg,\n    // to check whether user is trying to change his current location or not\n    ...state.location,\n    ...state.connectivity,\n    destinationDetail: state.destination.destinationDetail,\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    toggleUpdate: () => dispatch({type: ClockAction.TOGGLE_UPDATE}),\n    toggleChangeLocation: () => dispatch({type: LocationAction.TOGGLE_LOCATION_MODE}),\n    clearDestinationDetail: () => dispatch({type: DestinationAction.SHOW_DESTINATION_DETAIL, destination: null}),\n    clearDepartureQR: () => dispatch({type: MVGAction.SHOW_QR,qr: null})\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(Home)\n","/* eslint flowtype-errors/show-errors: 0 */\nimport React from 'react';\nimport { Switch, Route } from 'react-router';\nimport App from './containers/App';\nimport HomePage from './containers/HomePage';\n\nexport default () => (\n  <App>\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n    </Switch>\n  </App>\n);\n","// @flow\nimport React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'react-router-redux';\nimport Routes from '../routes';\n\ntype Props = {\n  store: {},\n  history: {}\n};\n\nexport default class Root extends Component<Props> {\n  render() {\n    return (\n      <Provider store={this.props.store}>\n        <ConnectedRouter history={this.props.history}>\n          <Routes />\n        </ConnectedRouter>\n      </Provider>\n    );\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\nimport Root from './containers/Root';\nimport { configureStore, history } from './store/configureStore';\nimport './app.global.css';\n\nconst store = configureStore();\n\nrender(\n  <AppContainer>\n    <Root store={store} history={history} />\n  </AppContainer>,\n  document.getElementById('root')\n);\n\nif (module.hot) {\n  module.hot.accept('./containers/Root', () => {\n    const NextRoot = require('./containers/Root'); // eslint-disable-line global-require\n    render(\n      <AppContainer>\n        <NextRoot store={store} history={history} />\n      </AppContainer>,\n      document.getElementById('root')\n    );\n  });\n}\n","// @flow\nimport type { counterStateType } from '../reducers/counter';\n\ntype actionType = {\n  +type: string\n};\n\nexport const INCREMENT_COUNTER = 'INCREMENT_COUNTER';\nexport const DECREMENT_COUNTER = 'DECREMENT_COUNTER';\n\nexport function increment() {\n  return {\n    type: INCREMENT_COUNTER\n  };\n}\n\nexport function decrement() {\n  return {\n    type: DECREMENT_COUNTER\n  };\n}\n\nexport function incrementIfOdd() {\n  return (\n    dispatch: (action: actionType) => void,\n    getState: () => counterStateType\n  ) => {\n    const { counter } = getState();\n\n    if (counter % 2 === 0) {\n      return;\n    }\n\n    dispatch(increment());\n  };\n}\n\nexport function incrementAsync(delay: number = 1000) {\n  return (dispatch: (action: actionType) => void) => {\n    setTimeout(() => {\n      dispatch(increment());\n    }, delay);\n  };\n}\n","import {CLOCK_TICK,CLOCK_RESET,TOGGLE_UPDATE} from '../actions/clock'\n\nconst defaultState = {\n  clock: 0,\n  currentTime: new Date(),\n  shouldUpdate: true,\n}\nexport default function clock(state = defaultState,action) {\n  switch(action.type) {\n    case CLOCK_RESET:\n      return {...state,clock: 0}\n\n    case CLOCK_TICK: // take the clock for one second\n      return {\n        ...state,\n        clock: state.clock + 1,\n        currentTime: new Date()\n      }\n    case TOGGLE_UPDATE:\n      return {\n        ...state,\n        shouldUpdate: !state.shouldUpdate\n      }\n\n    default: return state\n  }\n}\n","import * as MVGAction from '../actions/mvg'\n\nconst defaultState = {\n  stations: [],\n  closest_stations: [],\n  departures: [],\n  error: null,\n  // this is the connections object that stores the connections between one station to another\n  // the key of it would be the ID OF DESTINATION of the connection\n  // value would be the LIST of connections possible to reach this destination\n  connections: {},\n  // this is the list of lines that may or may not be in the cache,\n  // it will only be filled on demand (say the line info is requested)\n  lines: {},\n  // this is a list of line segment computed\n  connectionLines: {},\n\n  // the departure that we are looking at\n  watchingDepature: null,\n  departureQR: null,\n}\nexport default function mvg(state = defaultState,action) {\n  if(action.error) {\n    console.log(action)\n  }\n  switch(action.type) {\n    case MVGAction.GET_DEPARTURES_SUCCESS:\n      return {...state,departures: action.departures}\n    case MVGAction.GET_DEPARTURES_FAILED:\n      return {...state,departures: [], error: action.error}\n    case MVGAction.GET_CLOSEST_STATIONS:\n      return {...state,closest_stations: action.closest_stations}\n    case MVGAction.FETCH_STATION_FAILED:\n      return {...state,error: action.error}\n    case MVGAction.FETCH_STATION_SUCCESS:\n      return {...state,stations: action.stations,error: null}\n    case MVGAction.SET_CLOSEST_STATION:\n      return {...state,closest_stations: action.closest_stations}\n    case MVGAction.SET_CURRENT_LOCATION:\n      return {...state,lat: action.lat,lng: action.lng}\n    case MVGAction.GET_DEPARTURES_SUCCESS:\n      return {...state,departures: action.departures,error: null}\n    case MVGAction.GET_CONNECTION_FAILED:\n      return {...state,error: action.error}\n    case MVGAction.REMOVE_CONNECTION:\n      return {\n        ...state,\n        connections: Object.assign(...Object.keys(state.connections)\n          .filter(conn => conn != action.connection) // take away the removed connection\n          .map(conn => ({[conn]: state.connections[conn]})) // get the unaffected connection back\n        )\n      }\n    case MVGAction.GET_CONNECTION_SUCCESS:\n      return {\n        ...state,\n        error: null,\n        connections: {...state.connections,...action.connections}\n      }\n    case MVGAction.GET_LINE_SUCCESS:\n      return {\n        ...state,\n        error: null,\n        lines: {...state.lines,[action.name]:action.line}\n      }\n    case MVGAction.SET_LINE_SEGMENT_CACHE:\n      return {...state,connectionLines: Object.assign({},action.connectionLines)}\n\n    case MVGAction.WATCH_DEPARTURE:\n      return {...state, watchingDepature: action.departure}\n    case MVGAction.SHOW_QR:\n      return {...state,departureQR: action.qr}\n    default: return state\n  }\n}\n","import * as DestinationAction from '../actions/destination'\nimport {getPromise,setPromise} from '../api/destination'\nconst defaultState = {\n  destinations: [],\n  destinationDetail: null,\n  error: null,\n}\n\nexport default function destination(state = defaultState,action) {\n  switch(action.type) {\n    case DestinationAction.ADD_DESTINATION_SUCCESS:\n      return {...state,destinations: [...state.destinations,action.station]}\n    case DestinationAction.GET_DESTINATION_SUCCESS:\n      return {...state,destinations: action.destinations}\n    case DestinationAction.CLEAR_DESTINATION_SUCCESS:\n      return {...state,destinations: []}\n      \n    case DestinationAction.SHOW_DESTINATION_DETAIL:\n      return {...state,destinationDetail: action.destination}\n\n    case DestinationAction.ADD_DESTINATION_FAILED:\n    case DestinationAction.GET_DESTINATION_FAILED:\n    case DestinationAction.CLEAR_DESTINATION_FAILED:\n      return {...state,error: action.error}\n    default:\n      // clear error whenever there are add/get requests\n      return {...state,error: null}\n  }\n}\n","import * as LocationAction from '../actions/location'\n\nconst defaultState = {\n  isChangingLocation: false,\n}\n\n\nexport default function location(state = defaultState,action) {\n  switch(action.type) {\n    case LocationAction.TOGGLE_LOCATION_MODE:\n      return {...state,isChangingLocation: !state.isChangingLocation}\n    default:\n      return state\n  }\n}\n","// actions indicating the internet connection to certain services failed\nexport const SET_MVG_CONNECTIVITY_FLAG = \"SET_MVG_CONNECTIVITY_FLAG\"\nexport const SET_PROXY_CONNECTIVITY_FLAG = \"SET_PROXY_CONNECTIVITY_FLAG\"\nexport const SET_BACKEND_CONNECTIVITY_FLAG = \"SET_BACKEND_CONNECTIVITY_FLAG\"\nexport const SET_MVV_CONNECTIVITY_FLAG = \"SET_MVV_CONNECTIVITY_FLAG\"\n","import * as ConnectivityActions from '../actions/connectivity'\n\n// the state concerning connectivity to the endpoints\n// if its true it means the connection to the service is ok\n// otherwise its set to false\nconst defaultState = {\n  mvg_status: true,\n  mvv_status: true,\n  backend_status: true,\n  proxy_status: true\n}\n\nexport default function connectivityReducer(state = defaultState, action) {\n  switch(action.type) {\n    case ConnectivityActions.SET_MVG_CONNECTIVITY_FLAG:\n      return {...state, mvg_status: action.ok}\n    case ConnectivityActions.SET_MVV_CONNECTIVITY_FLAG:\n      return {...state, mvv_status: action.ok}\n    case ConnectivityActions.SET_BACKEND_CONNECTIVITY_FLAG:\n      return {...state, backend_status: action.ok}\n    case ConnectivityActions.SET_PROXY_CONNECTIVITY_FLAG:\n      return {...state, proxy_status: action.ok}\n      \n    default: return state\n  }\n}\n","// @flow\nimport { combineReducers } from 'redux';\nimport { routerReducer as router } from 'react-router-redux';\nimport counter from './counter';\nimport clock from './clock'\nimport mvg from './mvg'\nimport destination from './destinations'\nimport location from './location'\nimport connectivity from './connectivity'\nconst rootReducer = combineReducers({\n  counter,\n  mvg,\n  clock,\n  destination,\n  location,\n  router,\n  connectivity\n});\n\nexport default rootReducer;\n","// @flow\nimport { INCREMENT_COUNTER, DECREMENT_COUNTER } from '../actions/counter';\n\nexport type counterStateType = {\n  +counter: number\n};\n\ntype actionType = {\n  +type: string\n};\n\nexport default function counter(state: number = 0, action: actionType) {\n  switch (action.type) {\n    case INCREMENT_COUNTER:\n      return state + 1;\n    case DECREMENT_COUNTER:\n      return state - 1;\n    default:\n      return state;\n  }\n}\n","import {takeLatest,takeEvery} from 'redux-saga'\nimport { take,put,call,select } from \"redux-saga/effects\"\nimport * as MVGAction from '../actions/mvg'\nimport * as LocationAction from '../actions/location'\nimport * as DestinationAction from '../actions/destination'\n// TODO: refactor it!\nimport {getPromise,setPromise} from '../api/destination'\n\n\nconst locationStorageFieldKey = 'location'\nexport function getLocation() {\n  return getPromise(locationStorageFieldKey)\n}\n\nexport function* setLocation(action) {\n  let {lat,lng} = action\n\n  try {\n    yield call(setPromise,locationStorageFieldKey,{lat,lng})\n    yield put({type: LocationAction.SET_LOCATION_SUCCESS,lat,lng})\n\n  } catch(e) {\n    yield put({type: LocationAction.SET_LOCATION_FAILED,error: e})\n  }\n}\n\nexport function* refreshLocation() {\n  yield put({type: MVGAction.GET_STATIONS})\n  let destinations = yield select(state => state.destination.destinations)\n  // trigger recomputation of destinations\n  yield put({type: DestinationAction.GET_DESTINATION_SUCCESS,destinations})\n  // trigger recomputation of line segments...\n  yield take(MVGAction.GET_CONNECTION_SUCCESS)\n  yield put({type: MVGAction.COMPUTE_LINE_SEGMENT})\n\n}\n\nexport function* setLocationWatcher() {\n  yield takeLatest(LocationAction.SET_LOCATION,setLocation)\n}\n\nexport function* setLocationSuccessWatcher() {\n  yield takeLatest(LocationAction.SET_LOCATION_SUCCESS,refreshLocation)\n}\n","// provide methods for retrieving list of station of a transport line\nconst request = require('request')\nconst Utils = require('../utils/utils')\nconst Store = require('./destination')\nconst cheerio = require('cheerio')\nexport default class {\n\n  constructor() {\n    this.storeEncodeKey = 'encode'\n    this.proxy = \"http://localhost:9898/mvv\"\n    // this.endpoint = \"https://efa.mvv-muenchen.de/ng/XML_GEOOBJECT_REQUEST?\"\n    this.endpoint = `${this.proxy}/ng/XML_GEOOBJECT_REQUEST?`\n    // this.encodingEndpoint = \"https://efa.mvv-muenchen.de/xhr_regiobuses?zope_command=cached\"\n    this.encodingEndpoint = `${this.proxy}/xhr_regiobuses?zope_command=cached`\n    // this.generalEncodingEndpoint = \"https://efa.mvv-muenchen.de/\"\n    this.generalEncodingEndpoint = `${this.proxy}/index.html`\n    this.header = {\n    }\n  }\n\n  // line should be a human-readable value, say \"U2\", \"S1\", \"171\"...\n  // this function reads from the cache, if theres nothing it wont try to fetch something new\n  async getLineInfoEncode(line) {\n    let encodeDict = await Store.getPromise(this.storeEncodeKey)\n    let res = Object.keys(encodeDict).filter(key => encodeDict[key] == line)\n    if(res.length == 0) return null\n  }\n  // some scraping of the regional bus xhr...\n  async fetchRegionalBusEncodings() {\n    try {\n      let response = await this.performRequest(this.encodingEndpoint,false)\n      let $ = cheerio.load(response)\n      let resultObj = Object.assign(\n        ...$('label').map(\n          (i,el) => ({\n            [$(el).find('input').attr('value')]:\n             $(el).find('img').attr('alt')}))\n        .get()\n      )\n      return resultObj\n    } catch(e) {\n      return null\n    }\n  }\n  // some scraping of the general encodings\n  async fetchGeneralEncodings() {\n    try {\n      let response = await this.performRequest(this.generalEncodingEndpoint,false)\n\n      let $ = cheerio.load(response)\n      let resultObj = Object.assign(\n        ...$('label')\n          .filter((i,el) => $(el).has('input'))\n          .map((i,el) => ({[$(el).find('input').attr('value')]:\n              $(el).find('img').attr('alt')})\n            )\n          .get()\n      )\n      return resultObj\n    } catch(e) {\n      return null\n    }\n  }\n  async fetchLineEncodings(useCache = true) {\n    if(useCache) {\n      let data = await Store.getPromise(this.storeEncodeKey)\n      if(Object.keys(data).length) return data\n    }\n    // dont use cache here\n    let responses = await Promise.all([\n      this.fetchRegionalBusEncodings(),\n      this.fetchGeneralEncodings(),\n    ])\n    // aggregate results\n    let resultObj = {...responses[0],...responses[1]}\n    await Store.setPromise(this.storeEncodeKey,resultObj)\n    return resultObj\n\n  }\n  // given a line number, search for its corresponding encoding on MVV and fetch the stations list of it,\n  // this function gives the cached value if there is one\n  async getLineInfo(line, useCache = true) {\n    // try to find the relevant record from cache first\n    if(line.indexOf('-') > 0) {\n      // like and SEV, split and get the first half and try again\n      return await this.getLineInfo(line.split('-')[0],useCache)\n    }\n    if(useCache) {\n      let data = await Store.getPromise(line)\n      // use cache if possible\n      if(Object.keys(data).length > 0) {\n        return data\n      }\n    }\n\n    // no such thing in cache, get and store it\n    // first get the encode cache\n    let encode = await this.getLineInfoEncode(line)\n    if(!encode) return null // no cache sorry, you're out of luck\n    // otherwise fetch the encoding\n    let getRequestURL = encode => `${this.endpoint}&line=${encode}&outputFormat=json&coordListOutputFormat=STRING&hideBannerInfo=1&lineReqType=6&returnSinglePath=1&command=bothdirections`\n\n    try {\n      // perform request, fetch station object, then store it\n\n      let response = await Promise.all(encode.map(getRequestURL).map(this.performRequestJSON.bind(this)))\n      // check if all responses contain expected value, i.e. the geoObjects\n      if(response.some(r => !r.geoObjects)) {\n        return null\n      }\n      // obtain the result by combining all the line together...\n      let finalResult = Utils.flattenList(response.map(r => r.geoObjects.items.map(item => item.item)))\n      // try to cache it\n      await Store.setPromise(line,finalResult)\n      return finalResult\n    } catch(e) {\n\n      return null\n    }\n  }\n\n  performRequestJSON(url) {\n    return fetch(url,{\n      // mode: 'no-cors',\n      headers: {\n        ...this.header,\n\n      }\n    }).then(response => {\n      // if(!response.ok) throw {error: response,statusCode: response.status}\n      return response.json()\n    })\n  }\n\n  performRequest(url) {\n    return fetch(url,\n    {\n      headers: this.header\n    }).then(response => {\n      return response.text()\n    })\n  }\n  // given a connection (to destId....)\n  getPartsForNthConnection(connections,destId,currentTime,n) {\n    if(!connections[destId]) return null\n    let conns = connections[destId].filter(conn => conn.departure > currentTime)\n    if(conns.length <= n) return null\n    let conn = conns[n]\n    return conn.connectionPartList\n  }\n  /*\n    Given the part list from ONE PLACE TO ANOTHER , e.g. [{'U2',from: ..., to: ...,...},{'U3',...},...]\n    and the details of each lines [{'U2':[<station_list>],....}],\n    as well as the list of stations ( :( )\n    compute the list of coordinates for the line, as well as the\n  */\n  getLineForConnection(partList,lines,stations) {\n    if(!partList || !lines || ! stations) return {}\n    return Object.assign(...partList.map(part => {\n      // this handles the SEVs, from S1-3a to S1...\n      let partLabel = Utils.getConnectionPartCacheLabel(part)\n      if(!partLabel) return null\n      let {coords,mvvStationParts} = this.computeLineSegment(\n          part.from.id,\n          part.to.id,\n          partLabel,        // use the de-SEV labels to compute Line segments\n          lines,stations)\n      if(!coords) coords = [[part.from.latitude,part.from.longitude],[part.to.latitude,part.to.longitude]]\n      let fromStationId = part.from.id,\n          toStationId   = part.to.id\n      return {[partLabel]:{\n        label: part.label, // but display the original SEVs\n        coords,\n        // these will be useful later\n        fromStationId,\n        toStationId,\n\n      }}\n    }).filter(record => !!record)) // no null here!\n  }\n  // given the items[0] of each station line object (which means with * -> geoObjects -> items[0])\n  // which should have mode,paths,points\n  // try to sort the stations according to the path within the item\n  // the idea is: the path itself must be sorted (otherwise you cant render a line on map...)\n  // then for each station, get the closest point to the path, and the index of it,\n  // finally sort them according to the array of closest coords\n  sortStations(items) {\n    // the path is located at * -> paths[0] -> path...\n    // get the coords (2 numbers) from the path string\n    let path = items.paths[0].path.split(' ').map(Utils.coordsStringToCoord)\n    let stations = items.points.map(pt => ({...pt,coords : Utils.coordsStringToCoord(pt.ref.coords)}))\n    // give the stations indices...\n    stations.forEach(pt => pt.index = Utils.getIndexOfClosestCoords(path,pt.coords))\n\n    return stations.sort((sa,sb) => sa.index - sb.index)\n\n  }\n\n  getStationsBetween(fromId,toId,mvvStations,range = 0) {\n    // TODO: complete the range search!\n    let\n        purifyId = (id) => parseInt(id) % 1e5, // gonna use this later\n        mvvStationsIds = mvvStations.map(s => purifyId(s.ref.id)),\n        fromIdInList = mvvStationsIds.indexOf(fromId),\n        toIdInList   = mvvStationsIds.indexOf(toId),\n        getStationById = (id) => mvvStations.find(s => purifyId(s.ref.id) == id), // just in case...\n        hasInvalid = fromIdInList < 0 || toIdInList < 0\n    if(hasInvalid && range) { // enable range search\n      if(fromIdInList < 0) {\n        // this index is invalid!\n        // let fromStation = mvvStations.find()\n      }\n      if(toIdInList < 0) {\n        // recover it\n      }\n    }\n    if (hasInvalid) return null\n    else return (fromIdInList < toIdInList)?\n      mvvStations.slice(fromIdInList,toIdInList + 1) :\n      mvvStations.slice(toIdInList,fromIdInList + 1)\n  }\n  // given a connection (from station to station),lines (containing stations of all lines), and the cache (from state)\n  // give a computed new line segments\n  computeLineSegment(fromStationId,toStationId,lineLabel,lines,stations) {\n    let isSEV = false\n    let parts = Utils.splitConnectionPartCacheLabel(lineLabel)\n    let label = parts.line\n    if(label.indexOf('-') > -1) {\n      label = label.split('-')[0]\n      isSEV = true\n    }\n    if (!lines[label] || !lines[label].length) return {coords: null}\n    let items = lines[label][0]\n    let sortedStations = this.sortStations(items)\n\n    // now this is getting REALLY troublesome:\n    // since SEV is a SEV, that the station may or may not be the same from the line it replaces/\n    // e.g. SEV for S1's SEV starts from Feldmoching Bf. Ost, but clearly this station isn't passed through by S1\n    // therefore a RANGE SEARCH is needed to recover such station,\n    // this is based on an assumption that a SEV shouldnt start far away from the existing station,\n    // and that it should also be making use of the existing stations instead of making up a temporary one\n    let range = isSEV && 5 // search the closest 5 stations, which may or may not be the substitude of the affected station...\n    // get the parts (sub-list of stations) between the starting station and ending station\n    let mvvStationParts = this.getStationsBetween(fromStationId,toStationId,sortedStations,range)\n    if(!mvvStationParts) return {\n      coords: null,\n      mvvStationParts\n    }\n\n    // let smoothPathCoords = Utils.getSmoothPathCoordsInLatLng(items,mvvStationParts,stations)\n    // TODO: switch to smooth path!\n    // return smoothPathCoords\n    let mvvStationPartsWithCoordinates = mvvStationParts.map(s => Utils.convertMVVStationToMVGStation(s,stations))\n    let coords = mvvStationPartsWithCoordinates.map(s => s.coords)\n\n    return {coords,mvvStationParts}\n  }\n}\n","// sagas that listens to MVG-api related action\n// also launch actual api requests and dispatch action\nimport {takeLatest,takeEvery} from 'redux-saga'\nimport { take,put,call,select,all } from \"redux-saga/effects\"\nimport * as MVGAction from '../actions/mvg'\nimport * as DestinationAction from '../actions/destination'\nimport Api from '../api'\nimport * as Utils from '../utils/utils'\nimport * as LocationSaga from './location'\nimport {getPromise,setPromise} from '../api/destination'\nimport Line from '../api/line'\nimport * as ConnectivityActions from '../actions/connectivity'\n\nconst apiInstance = new Api()\nconst lineInstance = new Line()\n\nexport function* fetchStation() {\n  let stations\n  let storeKey = \"stations\"\n  stations = yield call(getPromise,storeKey)\n  if(Object.keys(stations).length == 0) {\n    // no stations stored in local storage, fetch from internet\n    try { // prepare for connectivity problems...\n      stations = yield call(apiInstance.getAllStations.bind(apiInstance))\n      if(stations.error) {\n        yield put({type: MVGAction.FETCH_STATION_FAILED,error: stations.error})\n      } else {\n        yield put({type: MVGAction.FETCH_STATION_SUCCESS, stations})\n        yield call(setPromise,storeKey,stations)\n      }\n\n      yield put({type: ConnectivityActions.SET_MVG_CONNECTIVITY_FLAG, ok: true})\n    } catch(connectivityError) {\n      yield put({type: ConnectivityActions.SET_MVG_CONNECTIVITY_FLAG, ok: false})\n    }\n  } else {\n    // get from store\n    yield put({type: MVGAction.FETCH_STATION_SUCCESS,stations})\n  }\n\n}\n// TODO: get the location from store\nfunction* getGeoLocation() {\n  // location should then be {lat,lng}\n  let location = yield call(LocationSaga.getLocation)\n\n  if(!location) {\n    // default location :)\n    return {\n      // Location of Giesing\n      lat: 48.11081,\n      lng: 11.594633,\n    }\n  } else return location\n}\n// saga that checks if there ware watching departures and that it has gone\n// if it is then it mutates the store to remove the watching departure...\nexport function* checkWatchingDepartureExpire() {\n  const watchingDepature = yield select(s => s.mvg.watchingDepature)\n  if(!watchingDepature) return // nothing to do here...\n  const currentTime = yield select(s => s.clock.currentTime)\n  if(currentTime > watchingDepature.departureTime) {\n    yield put({\n      type: MVGAction.WATCH_DEPARTURE,\n      depature: null\n    })\n  }\n}\nfunction* onFetchStationSuccess() {\n  // get closest station here!\n  const getAllStations = state => state.mvg.stations\n  const stations = yield select(getAllStations)\n  if(stations) {\n    let {lat,lng} = yield call(getGeoLocation)\n    yield put({type: MVGAction.SET_CURRENT_LOCATION,lat,lng})\n    let closestStations = yield call(apiInstance.getClosestStations,lat,lng,stations)\n    yield put({type: MVGAction.SET_CLOSEST_STATION,closest_stations:closestStations})\n    yield put({type: MVGAction.GET_DEPARTURES})\n  }\n}\n\nfunction* onGetConnection({target_station_id}) {\n  const getClosestStationsFromState = (state) => state.mvg.closest_stations\n  let closestStations = yield select(getClosestStationsFromState)\n\n  if(closestStations && closestStations.length) {\n    let closestStation = closestStations[0]\n    let from_station_id = closestStation.id\n    try {\n      let connections = yield call(\n        apiInstance.getConnections.bind(apiInstance),\n        from_station_id,target_station_id)\n      if(!connections || !connections.length || connections.error) yield put({type: MVGAction.GET_CONNECTION_FAILED,error: connections.error})\n      else {\n        // now try to make the reducer's life easier\n        // indicate the DESTINATION of this list of connections\n        let connectionsListObj = {\n          [connections[0].to.id]: connections\n        }\n        yield put({type: MVGAction.GET_CONNECTION_SUCCESS,connections: connectionsListObj})\n        yield put({type: ConnectivityActions.SET_MVG_CONNECTIVITY_FLAG, ok: true})\n      }\n    } catch(connectivityError) {\n      yield put({type: ConnectivityActions.SET_MVG_CONNECTIVITY_FLAG, ok: false})\n    }\n\n  }\n}\nfunction* onAddDestinationSuccess(action) {\n  yield call(onGetConnection,{target_station_id: action.station.id})\n}\nfunction* onGetDepartures() {\n  const getClosestStationsFromState = (state) => state.mvg.closest_stations\n  let closestStations = yield select(getClosestStationsFromState)\n\n  if(closestStations && closestStations.length) {\n    let closestStationsId = closestStations.map(s => s.id)\n    try {\n      let departures = yield all(closestStationsId.map(id => call(apiInstance.getDepartureById.bind(apiInstance),id)))\n      if(!departures || !departures.length) {\n        // unable to get departures...\n        yield put({type: MVGAction.GET_DEPARTURES_FAILED})\n        return\n      }\n      let departureLists = Utils.flattenList(departures.filter(d => !d.error))\n        .sort((a,b) => a.departureTime - b.departureTime)\n        .map(dep => ({...dep,from: closestStations.find(station => station.id == dep.id)})) // put the station origin back to the departures\n        .slice(0,30) // limit the number of departures show...\n      yield put({type:MVGAction.GET_DEPARTURES_SUCCESS,departures: departureLists})\n      yield put({type: ConnectivityActions.SET_MVG_CONNECTIVITY_FLAG, ok: true})\n    } catch(connectivityError) {\n      yield put({type: ConnectivityActions.SET_MVG_CONNECTIVITY_FLAG, ok: false})\n    }\n\n  }\n}\n// callback for taking \"GET_CONNECTION_SUCCESS\" event from the destination actions.\n// yield all connections to connections FROM THE CLOSEST STATION once and for all\n// TODO: how about from all closest stations to all destinations?!\nfunction* fetchConnectionsToAllStations(action) {\n  // let destinations = yield select(state => state.destination.destinations)\n  let destinations = action.destinations\n  // now destinations should be a list of stations, get the list...\n  let destinations_ids = destinations.map(d => d.id)\n  // invoke get connections actions given list of destinations ids, onGetConnection should do the rest\n  // (including the invocation of GET_CONNECTION_SUCCESS)\n  yield all(destinations_ids.map(id => call(onGetConnection,{target_station_id: id})))\n\n}\n\n/*\n  What it does:\n    for each of the destinations, get the earliest connections of each of them.\n    for each of the connections, gather the parts of them\n    if theres no such parts on the state, calculate it,\n\n    then put actions and store the result\n\n*/\nfunction* onComputeLineSegment() {\n  // reevaluate the connections\n  // objects storing the way to go from one place to another, in different times, in different ways\n  let connections = yield select(state => state.mvg.connections)\n  // wait wait, this is also the line we're gonna display!\n  // let cache = yield select(state => state.mvg.connectionLines)\n  // this stores the list of stations\n  let stations = yield select(state => state.mvg.stations)\n  let currentTime = yield select(state => state.clock.currentTime)\n  // this stores the list of stations a transport line is gonna travel through\n  let lines = yield select(state => state.mvg.lines)\n\n  if(!Object.keys(connections).length || !stations || ! lines) return\n  // The line retrieval part should be done in the lineInstance instead...\n\n  // DO NOT FLATTEN THE LIST OF CONNECTIONS!\n  // Instead map to them\n  let displayLines = Object.assign(...(Object.keys(connections)\n      .map(destId => { // mapping to a list of generators...\n        let firstConnectionParts = lineInstance.getPartsForNthConnection(connections,destId,currentTime,0)\n        let lineForConnection = lineInstance.getLineForConnection(firstConnectionParts,lines,stations)\n        return lineForConnection\n      }) //\n      // then connectionsList is now a list of ... connections, with each of the the earliest connectionPartList\n      .filter(part => !!part) // may or may not be null, if there are no connection between the two places...\n    ) // make sure the labels exist\n  )\n  yield put({type: MVGAction.SET_LINE_SEGMENT_CACHE,connectionLines:displayLines})\n}\n// this function triggers the reload of all stations\n// which is useful when a list of station has been changed\nfunction* reloadDestinations() {\n  yield put({type:MVGAction.COMPUTE_LINE_SEGMENT})\n}\n// remove the connection entry from the connection object once its removed\nfunction* onRemoveDestinationSuccess(action) {\n  yield put({type: MVGAction.REMOVE_CONNECTION,connection: action.connection})\n}\nexport function* watchFetchStations() {\n  yield takeEvery(MVGAction.GET_STATIONS,fetchStation)\n}\n\nexport function* watchGetDepartures() {\n  yield takeLatest(MVGAction.GET_DEPARTURES,onGetDepartures)\n}\n\n// given a successful fetch of stations, trigger the closest point calculation\nexport function* watchFetchStationsSuccess() {\n  yield takeLatest(MVGAction.FETCH_STATION_SUCCESS,onFetchStationSuccess)\n}\n\nexport function* watchGetConnections() {\n  // take every because multiple \"GET_CONNECTION\" action may be dispatched\n  yield takeEvery(MVGAction.GET_CONNECTION,onGetConnection)\n}\n\n// also watch when get destination success\n// because after the destination fetching success the connections to them needs to be explicitly fetched\nexport function* watchGetDestinationSuccess() {\n  yield takeLatest(DestinationAction.GET_DESTINATION_SUCCESS,fetchConnectionsToAllStations)\n}\n\n// also need to watch a successful add of destination...\n// because the connections of the new dest needs to be fetched immediately..\nexport function* watchAddDestinationSuccess() {\n  yield takeEvery(DestinationAction.ADD_DESTINATION_SUCCESS,onAddDestinationSuccess)\n}\n\nexport function* watchComputeLineSegment() {\n  yield takeLatest(MVGAction.COMPUTE_LINE_SEGMENT,onComputeLineSegment)\n}\n\n// also evaluate line segments again if a station is removed\nexport function* watchDestinationRemove() {\n  yield takeLatest(DestinationAction.REMOVE_DESTINATION_SUCCESS,onRemoveDestinationSuccess)\n}\nexport function* watchDestinationAdd() {\n  yield takeLatest(DestinationAction.ADD_DESTINATION_SUCCESS,reloadDestinations)\n}\n","import {takeLatest,takeEvery} from 'redux-saga'\nimport { take,put,call,select } from \"redux-saga/effects\"\n\nimport * as MVGAction from '../actions/mvg'\nimport * as DestinationAction from '../actions/destination'\nimport {getPromise,setPromise,clearPromise,removePromise} from '../api/destination'\nimport {getDestinations,addDestinations,removeDestinations,clearDestinations} from '../api/destination'\n\nimport * as ConnectivityAction from '../actions/connectivity'\n\nimport Api from '../api'\n\nconst destinationStorageFieldKey = \"destinations\"\n\nexport function* clearDestination() {\n  try {\n    yield call(clearDestinations)\n    // yield call(clearPromise,destinationStorageFieldKey)\n    yield put({type: DestinationAction.CLEAR_DESTINATION_SUCCESS})\n    yield put({type: ConnectivityAction.SET_BACKEND_CONNECTIVITY_FLAG, ok: true})\n  }catch(e) {\n    yield put({type: ConnectivityAction.SET_BACKEND_CONNECTIVITY_FLAG, ok: false})\n    yield put({type:DestinationAction.CLEAR_DESTINATION_FAILED,error:e})\n  }\n}\n\nexport function* storeDestination(action) {\n  let station = action.station\n  try {\n    let result = yield call(addDestinations,station)\n    yield put({type: DestinationAction.ADD_DESTINATION_SUCCESS,station: result})\n\n    yield put({type: ConnectivityAction.SET_BACKEND_CONNECTIVITY_FLAG, ok: true})\n  } catch(e) {\n    yield put({type: ConnectivityAction.SET_BACKEND_CONNECTIVITY_FLAG, ok: false})\n    yield put({type: DestinationAction.ADD_DESTINATION_FAILED,error:e})\n  }\n\n}\n\n\nexport function* getDestination() {\n  try {\n    let destinations = yield call(getDestinations)\n    // let destinations = yield call(getPromise,destinationStorageFieldKey)\n    // if(Object.keys(destinations).length == 0) destinations = []\n    yield put({type: DestinationAction.GET_DESTINATION_SUCCESS,destinations})\n    yield put({type: ConnectivityAction.SET_BACKEND_CONNECTIVITY_FLAG, ok: true})\n  }catch(e) {\n    yield put({type: ConnectivityAction.SET_BACKEND_CONNECTIVITY_FLAG, ok: false})\n    yield put({type: DestinationAction.GET_DESTINATION_FAILED,error: e})\n  }\n}\nexport function* removeDestination(action) {\n  try {\n    let destination = action.destination\n    let id = destination.id\n    //let id = destination._id // use the id in mongo\n    yield call(removeDestinations,id)\n\n    // yield call(removePromise,destinationStorageFieldKey,id)\n    // this is to refresh destination list\n    yield put({type: DestinationAction.GET_DESTINATION})\n    yield put({type: DestinationAction.REMOVE_DESTINATION_SUCCESS,connection: id})\n    yield put({type: ConnectivityAction.SET_BACKEND_CONNECTIVITY_FLAG, ok: true})\n\n  } catch(e) {\n    yield put({type: ConnectivityAction.SET_BACKEND_CONNECTIVITY_FLAG, ok: false})\n    yield put({type: DestinationAction.REMOVE_DESTINATION_FAILED,error: e})\n  }\n}\nexport function* storeDestinationWatcher() {\n  yield takeEvery(DestinationAction.ADD_DESTINATION,storeDestination)\n}\nexport function* getDestinationWatcher() {\n  yield takeLatest(DestinationAction.GET_DESTINATION,getDestination)\n}\n\nexport function* clearDestinationWatcher() {\n  yield takeLatest(DestinationAction.CLEAR_DESTINATION,clearDestination)\n}\n\nexport function* removeDestinationWatcher() {\n  yield takeLatest(DestinationAction.REMOVE_DESTINATION,removeDestination)\n}\n","import {takeLatest,takeEvery} from 'redux-saga'\nimport { take,put,call,select,all } from \"redux-saga/effects\"\n\nimport * as MVGAction from '../actions/mvg'\nimport LineAPI from '../api/line'\nimport * as Utils from '../utils/utils'\n\nconst lineApiInstance = new LineAPI()\n\nexport function* fetchEncodings() {\n  try {\n    let result = yield call(lineApiInstance.fetchLineEncodings.bind(lineApiInstance))\n    if(result) yield put({type: MVGAction.GET_LINE_ENCODING_SUCCESS,result})\n    else yield put({type: MVGAction.GET_LINE_ENCODING_FAILED})\n  } catch(e) {\n    yield put({type: MVGAction.GET_LINE_ENCODING_FAILED,error:e})\n  }\n}\nexport function* getLineInfo(action) {\n  try {\n    let line = action.line\n    let result = yield call(lineApiInstance.getLineInfo.bind(lineApiInstance),line)\n    if(!result) yield put({type: MVGAction.GET_LINE_FAILED,line})\n    else yield put({\n      type: MVGAction.GET_LINE_SUCCESS,\n      name: line,\n      line: result\n    })\n  } catch(e) {\n    // just for some logging purposes\n    yield put({type: MVGAction.GET_LINE_FAILED,line: action.line,error: e})\n  }\n}\n/*\n  handler that gets line info once the connection is successfully fetched.\n  the action should have \"connection\" as a field,\n  and this \"connection\" field should be like\n  {\n    [id] : [\n      {\n        departure:...,\n        arrival:...,\n        ...,\n        connectionPartList: {\n\n        }\n      }\n    ]\n  }\n*/\n// handles connection info on each\nexport function* getLineInfoOnGetConnectionSuccess(action) {\n  let connections = action.connections\n  if(!connections) {\n    return\n  }\n  // get all the LABELS from the connection part list\n  let lines = Utils.flattenList(\n    Object.values(connections)[0].map(conn => // one of the connections. why one? because there can only be one...\n        conn.connectionPartList.map(part => part.label) // get labels of all part of connections\n    )\n  )\n  .filter(l => !!l) // no footway or anything undefined please\n\n  lines = [...new Set(lines)] // unique labels only\n  yield all( // launch all requests / fetch from cache actions\n    lines.map(line =>\n      put({type: MVGAction.GET_LINE,line})// trigger GET_LINE action for all of the distinct line\n    )\n  )\n\n}\nexport function* getLineWatcher() {\n  yield takeEvery(MVGAction.GET_LINE,getLineInfo)\n}\n\n// this function watches for the \"get connection success\" event,\n// take all of the lines required within the connection,\n// and fetch the station list of this line\nexport function* getLineOnGetConnectionSuccessWatcher() {\n  yield takeEvery(MVGAction.GET_CONNECTION_SUCCESS,getLineInfoOnGetConnectionSuccess)\n}\n\nexport function* getLineEncodingWatcher() {\n  yield takeLatest(MVGAction.GET_LINE_ENCODING,fetchEncodings)\n}\n","import { takeLatest,takeEvery,delay } from \"redux-saga\"\nimport { call, put,select,all,spawn } from \"redux-saga/effects\"\nimport * as MVGAction from '../actions/mvg'\nimport * as DestinationAction from '../actions/destination'\nimport Api from './mvg'\nimport {CLOCK_RESET,CLOCK_TICK} from '../actions/clock'\nimport {\n  watchGetDepartures,\n  watchFetchStations,\n  watchGetConnections,\n  watchFetchStationsSuccess,\n  watchGetDestinationSuccess,\n  watchAddDestinationSuccess,\n  watchComputeLineSegment,\n\n  watchDestinationAdd,\n  watchDestinationRemove,\n\n  checkWatchingDepartureExpire,\n} from './mvg'\n\nimport {\n  storeDestinationWatcher,\n  getDestinationWatcher,\n  clearDestinationWatcher,\n  removeDestinationWatcher,\n} from './destination'\nimport {\n  setLocationWatcher,\n  setLocationSuccessWatcher,\n} from './location'\nimport {\n  getLineWatcher,\n  getLineOnGetConnectionSuccessWatcher,\n  getLineEncodingWatcher,\n} from './line'\n\nconst getClock = (state) => state.clock.clock\n//reset clock\nexport function* resetClock() {\n  yield put({type: CLOCK_RESET})\n}\n// elapse a second\n\nexport function* tick() {\n\n  let stateClock = yield select(getClock)\n  let shouldUpdate = yield select(state => state.clock.shouldUpdate)\n\n  // check watch departure's expration\n  yield call(checkWatchingDepartureExpire)\n  // for every minute...\n  // fetch station (subject to be changed)\n\n  if(stateClock == 0) {\n    // only fetch at the beginning of the program\n    yield put({type: MVGAction.GET_STATIONS})\n    yield put({type: DestinationAction.GET_DESTINATION})\n    // fetch line encoding\n    yield put({type: MVGAction.GET_LINE_ENCODING})\n\n  }\n  try { // guard the departure fetching process\n  // update line segment every 5 seconds\n    if(stateClock > 0 && stateClock % 5 == 0 && shouldUpdate) {\n      yield put({type: MVGAction.COMPUTE_LINE_SEGMENT})\n    }\n    // TODO: what if get stations failed??\n\n    if(stateClock > 0 && stateClock % 60 == 0 && shouldUpdate) {\n      // for all subsequent time...\n      yield put({type: MVGAction.GET_DEPARTURES})\n      // synchronise destination with server\n      yield put({type: DestinationAction.GET_DESTINATION})\n      // trigger reload of all connection list\n      // let destinations = yield select(state => state.destination.destinations)\n      // yield put({type: DestinationAction.GET_DESTINATION_SUCCESS,destinations})\n    }\n  }\n  catch (e) {\n    yield put({type: MVGAction.GET_DEPARTURES_FAILED,error: e})\n    yield put({type: CLOCK_TICK})\n  }\n  // tick the clock in all situation\n  yield put({type: CLOCK_TICK})\n}\nexport function* mainLoop() {\n  while(true) {\n    yield delay(1000)\n    try {\n      yield call(tick)\n    } catch(e) {\n      console.log('ticking error')\n      console.log(e)\n      yield mainLoop()\n    }\n\n  }\n}\nexport default function* rootSaga(getState) {\n  yield [\n    // watchers related to common MVG-station-related actions\n    watchFetchStations(),\n    watchGetDepartures(),\n    watchGetConnections(),\n    watchFetchStationsSuccess(),\n    watchGetDestinationSuccess(),\n    watchAddDestinationSuccess(),\n\n    // watchers related to destination info\n    storeDestinationWatcher(),\n    clearDestinationWatcher(),\n    getDestinationWatcher(),\n    removeDestinationWatcher(),\n\n    // watchers related to line info\n    // explicitly watch for a line info request\n    // I'm quite sure that it is needed later\n    getLineWatcher(),\n      // also get line info once connection fetch is succesful\n    getLineOnGetConnectionSuccessWatcher(),\n    getLineEncodingWatcher(),\n\n    watchComputeLineSegment(),\n    watchDestinationAdd(),\n    watchDestinationRemove(),\n    // location watcher\n    setLocationWatcher(),\n    setLocationSuccessWatcher(),\n    // of course the main loop for ticking the clock and perform regular update\n    mainLoop()\n  ]\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createHashHistory } from 'history';\nimport { routerMiddleware, routerActions } from 'react-router-redux';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from '../reducers';\nimport * as counterActions from '../actions/counter';\nimport type { counterStateType } from '../reducers/counter';\nimport createSagaMiddleware from 'redux-saga'\nimport rootSaga from '../sagas'\nconst sagaMiddleware = createSagaMiddleware()\n\nexport const history = createHashHistory();\n\nexport const configureStore = (initialState?: counterStateType) => {\n  // Redux Configuration\n  const middleware = [];\n  const enhancers = [];\n\n  // Thunk Middleware\n  middleware.push(thunk);\n\n  // Logging Middleware\n  const logger = createLogger({\n    level: 'info',\n    collapsed: true\n  });\n\n  // Skip redux logs in console during the tests\n  if (process.env.NODE_ENV !== 'test') {\n    middleware.push(logger);\n  }\n\n  // Router Middleware\n  const router = routerMiddleware(history);\n  middleware.push(router);\n\n  // Redux DevTools Configuration\n  const actionCreators = {\n    ...counterActions,\n    ...routerActions\n  };\n  // If Redux DevTools Extension is installed use it, otherwise use Redux compose\n  /* eslint-disable no-underscore-dangle */\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        // Options: http://zalmoxisus.github.io/redux-devtools-extension/API/Arguments.html\n        actionCreators\n      })\n    : compose;\n  /* eslint-enable no-underscore-dangle */\n\n  // Apply Middleware & Compose Enhancers\n  enhancers.push(applyMiddleware(...middleware));\n  // use saga\n  enhancers.push(applyMiddleware(sagaMiddleware));\n  const enhancer = composeEnhancers(...enhancers);\n\n  // Create Store\n  const store = createStore(rootReducer, initialState, enhancer);\n  // run root saga from here\n  sagaMiddleware.run(rootSaga)\n\n  if (module.hot) {\n    module.hot.accept(\n      '../reducers',\n      () => store.replaceReducer(require('../reducers')) // eslint-disable-line global-require\n    );\n  }\n\n  return store;\n};\n\n// export default { configureStore, history };\n","// common styles\nlet color = {\n  blue: \"#375a7f\",\n  indigo: \"#6610f2\",\n  red: \"#E74C3C\",\n  green: \"#00bc8c\"\n}\nlet centerContentStyle = {\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\"\n}\n\nlet underlineStyle = {\n  borderBottom: \"1px solid white\"\n}\n\nlet tokenList = {\n    display: \"flex\",\n    justifyContent: \"spaceAround\",\n    alignItems: \"flexStart\"\n}\nlet cell = {\n  ...centerContentStyle,\n  display: \"flex\",\n  flexDirection: \"column\",\n  width: 40,\n  height: 40,\n  padding: 4,\n  fontWeight: \"bold\"\n}\n\nexport default {\n  tokenList,\n  watchingDeparture: {\n    backgroundColor: color.green,\n    width: '100%'\n  },\n  app: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    overflowX: \"hidden\"\n  },\n  modal: {\n\n    container: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      inputField: {\n        flex: \"0 0 20%\",\n        paddingBottom: 16,\n      },\n      map: {\n        paddingTop:16,\n        flex: \"0 0 80%\",\n      }\n    }\n  },\n  tooltip: {\n\n    container: {\n      // width: 120,\n      ...centerContentStyle,\n      flexDirection: \"column\",\n      overview: {\n        flex: 1,\n      },\n      departureTime: {\n        flex: 1,\n        display: \"flex\",\n        justifyContent:\"space-between\",\n\n        left: {\n          ...cell,\n          borderRight: \"1px solid #333\"\n        },\n        right: {\n          ...cell,\n          borderLeft: \"1px solid #333\",\n        },\n        center: {\n          ...cell\n        }\n      }\n    },\n  },\n  stationSelection: {\n    display: \"flex\",\n    labels: {\n      flex: 1,\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      color: \"white\"\n    },\n    name: {\n      flex: 1,\n      textTransform: \"capitalize\",\n      ...centerContentStyle\n    }\n  },\n  destinationList: {\n    header: {\n      display: \"flex\",\n      flex: \"0 0 10%\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n\n    },\n    destinationContainer: {\n      margin: 16,\n      flex: \"0 0 65%\"\n    },\n    pagination: {\n      flex: \"0 0 10%\"\n    },\n\n  },\n  destinationCard: {\n    display: \"flex\",\n    flexDirection:\"column\",\n    transportationList: {\n      margin: 8,\n    },\n    edit: {\n      button: {\n        padding: 4\n      }\n    },\n    upperRow: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      remove: {\n        flex: 1,\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        marginTop: 8,\n        marginBottom: 8\n      },\n      left: {\n        flex: 3,\n        display: \"flex\",\n        alignItems: \"center\",\n        name: {\n          paddingLeft: \"16px\"\n        },\n      },\n\n      right: {\n        flex: 1,\n        display: \"flex\",\n        flexDirection: \"column\",\n        textAlign: \"right\",\n        up: {\n          flex: 1,\n          fontWeight: \"bold\",\n        },\n        down: {\n          flex: 1,\n        }\n      }\n    },\n    lowerRow: {\n      display: \"flex\",\n      alignItems: \"center\"\n    },\n    input: {\n      container: {\n        position: 'relative',\n      },\n      input: {\n        width: '100%',\n        height: \"80%\",\n        padding: '10px 20px',\n        fontWeight: 300,\n        fontSize: 16,\n        border: '1px solid #aaa',\n        borderTopLeftRadius: 4,\n        borderTopRightRadius: 4,\n        borderBottomLeftRadius: 4,\n        borderBottomRightRadius: 4,\n      },\n      inputFocused: {\n        outline: 'none'\n      },\n      inputOpen: {\n        borderBottomLeftRadius: 0,\n        borderBottomRightRadius: 0\n      },\n      suggestionsContainer: {\n        display: 'none'\n      },\n      suggestionsContainerOpen: {\n        display: 'block',\n        zIndex: 1000,\n        position: 'absolute',\n        top: 40,\n        width: '100%',\n        border: '1px solid #aaa',\n        backgroundColor: '#fff',\n        color: '#222',\n        fontWeight: 300,\n        fontSize: 16,\n        borderBottomLeftRadius: 4,\n        borderBottomRightRadius: 4,\n      },\n      suggestionsList: {\n        margin: 0,\n        padding: 0,\n        listStyleType: 'none',\n      },\n      suggestion: {\n        cursor: 'pointer',\n        padding: '10px 20px'\n      },\n      suggestionHighlighted: {\n        backgroundColor: '#ddd'\n      }\n    }\n  },\n  departureCard: {\n    display: 'flex',\n    flexDirection: 'row',\n    height: \"72px\",\n    leftColumn: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems:'center'\n    },\n    middleColumn: {\n      flex: 4,\n\n      display: 'flex',\n      flexDirection: 'column',\n      upperRow: {\n        flex: 1,\n        fontWeight: \"bold\",\n        display: \"flex\",\n        flexDirection: \"row\"\n      },\n      lowerRow: {\n        flex: 1,\n        fontSize: '12px',\n      }\n    },\n\n    rightColumn: {\n      flex: 1,\n      display: 'flex',\n      flexDirection: \"column\",\n      alignItems: \"flex-start\",\n      upperRow: {\n        flex: 1,\n      },\n      center: {\n        display: 'flex',\n        flex: 1,\n        width: '100%',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }\n    }\n\n  },\n\n  lineTag: {\n\n    height: \"16px\",\n    width: \"24px\",\n    margin: \"4px\",\n    fontSize: \"9px\",\n    fontWeight: \"bold\",\n    ...centerContentStyle,\n  },\n  centerContentStyle,\n  imageWithText: {\n    display: \"flex\",\n    margin: \"24px\",\n    flexDirection: \"column\",\n    textAlign: \"center\",\n    ...centerContentStyle,\n  },\n  stationCard: {\n    width: \"100%\",\n    // maxHeight: \"72px\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    ...underlineStyle,\n\n    leftContainer: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      flex: 3,\n      marginBottom: \"4px\",\n      tokenList,\n\n    },\n    rightContainer: {\n      display: \"flex\",\n      flex: 1,\n      flexDirection: \"column\",\n      ...centerContentStyle\n    }\n  },\n  loadingOverlayStyle: {\n    ...centerContentStyle,\n\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    height: \"100%\",\n    width: \"100%\",\n\n\n    flexDirection: \"column\",\n    zIndex: 1001,\n    backgroundColor: \"rgba(0,0,0,0.5)\",\n\n    spinnerContainer: {\n        height: \"64px\",\n        width: \"64px\",\n\n    }\n  },\n  navBar: {\n    location: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }\n  },\n  mainContainer: {\n    flex: 1,\n    // position: \"absolute\",\n    overflowX: \"hidden\",\n    // top: \"62px\", // this is the offset for the nav bar\n    width: \"100%\",\n    bottom: 0,\n    left: 0,\n\n    display: \"flex\",\n    flexDirection: \"row\",\n\n    leftContainer: {\n      flex: \"0 0 50%\",\n      display: \"flex\",\n      margin: \"1%\",\n      zIndex: 2,\n      ...centerContentStyle,\n      flexDirection: \"column\",\n      topContainer: {\n        flex: \"0 0 144px\",\n        position: \"relative\",\n        flexDirection: \"column\",\n        width: \"100%\",\n        // paddingLeft: \"10%\",\n        // ...underlineStyle,\n        overlay: {\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          zIndex: 10000,\n          flexDirection: \"column\",\n          // width: \"100%\",\n          // height: \"100%\",\n          padding: '1%',\n        }\n      },\n      bottomContainer: {\n        flex: \"1 0 80%\", // 80% of the basis\n        flexDirection: \"column\",\n        width: \"100%\",\n        display: \"flex\",\n        overflowY: \"hidden\"\n      }\n    },\n    rightContainer: {\n      flex: \"0 0 50%\",\n      display: \"flex\",\n      zIndex: 2,\n      ...centerContentStyle,\n      flexDirection: \"column\",\n      topContainer: {\n        flex: 1,\n        alignText: 'center',\n        width: \"100%\",\n        marginBottom: \"16px\",\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        display: 'flex',\n      },\n      middleContainer: {\n        flex: \"4\",\n        width: \"100%\",\n        overflowY: \"hidden\",\n      },\n      bottomContainer: {\n        flex: \"1\",\n        width: \"100%\"\n\n      }\n    }\n  }\n}\n","export const GET_STATIONS = 'GET_STATIONS'\nexport const GET_DEPARTURES = 'GET_DEPARTURES'\nexport const GET_DEPARTURES_FAILED = \"GET_DEPARTURES_FAILED\"\nexport const GET_DEPARTURES_SUCCESS = \"GET_DEPARTURES_SUCCESS\"\n\nexport const GET_CLOSEST_STATIONS = 'GET_CLOSEST_STATIONS'\nexport const FETCH_STATION_FAILED = \"FETCH_STATION_FAILED\"\nexport const FETCH_STATION_SUCCESS = \"FETCH_STATION_SUCCESS\"\nexport const SET_CLOSEST_STATION = \"SET_CLOSEST_STATION\"\nexport const SET_CURRENT_LOCATION = \"SET_CURRENT_LOCATION\"\n\nexport const GET_CONNECTION = \"GET_CONNECTION\"\nexport const GET_CONNECTION_SUCCESS = \"GET_CONNECTION_SUCCESS\"\nexport const GET_CONNECTION_FAILED = \"GET_CONNECTION_FAILED\"\n\nexport const REMOVE_CONNECTION = \"REMOVE_CONNECTION\"\n\nexport const GET_LINE = \"GET_LINE\"\nexport const GET_LINE_SUCCESS = \"GET_LINE_SUCCESS\"\nexport const GET_LINE_FAILED = \"GET_LINE_FAILED\"\nexport const GET_LINE_ENCODING = \"GET_LINE_ENCODING\"\nexport const GET_LINE_ENCODING_SUCCESS = \"GET_LINE_ENCODING_SUCCESS\"\nexport const GET_LINE_ENCODING_FAILED = \"GET_LINE_ENCODING_FAILED\"\n\nexport const COMPUTE_LINE_SEGMENT = \"COMPUTE_LINE_SEGMENT\"\nexport const SET_LINE_SEGMENT_CACHE = \"SET_LINE_SEGMENT_CACHE\"\n\nexport const WATCH_DEPARTURE = \"WATCH_DEPARTURE\"\nexport const SHOW_QR = \"SHOW_QR\"\n","import React from 'react'\nimport LineTag from '../components/LineTag'\nimport style from '../components/Style'\nimport {\n  Glyphicon\n} from 'react-bootstrap'\nimport {\n  TileLayer\n} from 'react-leaflet'\nexport const getMapTileLayer = () => {\n  return (\n    <TileLayer\n      url='https://cartodb-basemaps-{s}.global.ssl.fastly.net/rastertiles/voyager/{z}/{x}/{y}{r}.png'\n    />\n  )\n}\nexport const getStationName = (station) => {\n  let {name,place} = station\n  if(!name || ! place) return \"\"\n  return `${name}, ${place}`\n}\n\n\nlet deg2rad = function(deg) {\n  return deg * (Math.PI/180)\n}\n\nexport const getDistanceFromLatLonInKm = (lat1,lon1,lat2,lon2) => {\n  var R = 6371; // Radius of the earth in km\n  var dLat = deg2rad(lat2-lat1);  // deg2rad below\n  var dLon = deg2rad(lon2-lon1);\n  var a =\n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n    Math.sin(dLon/2) * Math.sin(dLon/2)\n    ;\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  var d = R * c; // Distance in km\n  return d;\n}\n\n\nexport const getProductColorCode = (product) => {\n  switch(product) {\n    case 'SBAHN':\n      return \"#964438\"\n    case 'UBAHN':\n      return \"#dd3d4d\"\n    case 'BUS':\n      return \"#0d5c70\"\n    case 'TRAM':\n      return \"#ea4029\"\n    default: return \"#222\"\n  }\n}\n// hardcoding this list is easier than obtaining it programmatically...\n/*\n  Its the U bahn and S bahn that are more colorful..\n  for buses, trams and the rest they usually use a unified color.\n*/\nexport const getColor = (line) => {\n\n  if(!line) return '#eeeeee' // a gray line\n  if(line.indexOf('-') > 0) {\n    // SEV cases..\n    line = line.split('-')[0]\n  }\n  switch(line) {\n    case 'U1':\n    case 'U7':\n      return \"#45803A\"\n    case 'U2':\n      return \"#C2133B\"\n    case 'U3':\n    case 'U8':\n      return \"#F16E3B\"\n    case 'U4':\n      return \"#20B28D\"\n    case 'U5':\n      return \"#B77320\"\n    case 'U6':\n      return \"#0E6DB1\"\n    case \"U\": // some special trains...\n      return\n    case 'S1':\n      return \"#29C0E7\"\n    case 'S2':\n      return \"#73BE4C\"\n    case 'S3':\n      return \"#8E2C8D\"\n    case 'S4':\n      return \"#EB2131\"\n    // case 'S5': // theres no S5...\n    case 'S6':\n      return \"#159865\"\n    case 'S7':\n      return \"#873330\"\n    case 'S8':\n      return \"#231F20\"\n    case 'S20':\n      return \"#E8536F\"\n\n  }\n  // check if its a tram /metro bus\n  if(line.match(/^\\d{2}$/)) {\n    let num = parseInt(line)\n    if(12 <= num && num <= 37) return \"#D62429\" // the trams\n    if(50 >= num) return \"#EA6732\" // the metro bus\n  }\n\n  if(line[0] == \"R\") {\n    // the regional trains..\n    return \"#373B7D\"\n  }\n  if(line[0] == \"X\") {\n    // the express bus...\n    return \"#51907A\"\n  }\n\n  // the bus, the unknown lines...\n  return \"#085365\"\n}\nexport const getProductShortName = (product) => {\n  switch(product) {\n    case 'TRAM':\n      return 'Tram'\n    case 'BUS':\n      return product\n    default:\n      return product[0]\n  }\n}\nexport const getConnectionDisplayComponents = (connection) => {\n  let intermediateComponent = <Glyphicon glyph=\"arrow-right\" />\n  let walkingComponent = <Glyphicon glyph=\"piggy-bank\" /> // i found no pedestrian icon, just a pig there:)\n  // get the \"connection parts\" of this connection, convert them to components\n  let partComponents = connection.connectionPartList.map(part => {\n    if(part.connectionPartType == \"FOOTWAY\") return walkingComponent // sorry you have to walk...\n    else { // i think this is a transportation, now lets look at the part..\n      let label = part.label\n      return <LineTag key={part.label} backgroundColor={getColor(label)} line={label} />\n    }\n  })\n  .map((part,i) => <div key={i} style={style.destinationCard.transportationList}> {part} </div>)\n  // make the \"intermediateComponent\" (i.e. arrow) and part components go one after another\n  let res = partComponents.reduce((list,part) => list.concat(part,intermediateComponent),[])\n  res.pop() // why? because for the above lines one part label and one arrow is added for each part.\n  // But I dont want the last arrow to be there, thats why I pop..\n  return res\n}\nexport const getStationProductLineTags = (station) => {\n  return station.products.map(p => <LineTag line={getProductShortName(p)} backgroundColor={getProductColorCode(p)} />)\n}\n\nexport const flattenList = (lists) => {\n  return lists.reduce((a,b) => ([...a,...b]),[])\n}\n\nexport const unixTimeStampToDate = (ts) => new Date(ts)\nexport const pad = (s,len = 2) => s.toString().padStart(len,'0')\nexport const unixTimeStampToDateHHMM = (ts) => {\n  let time = unixTimeStampToDate(ts)\n  // let pad = (s) => s.toString().padStart(2,'0')\n  let hh = pad(time.getHours())\n  let mm = pad(time.getMinutes())\n  return `${hh}:${mm}`\n}\nexport const timeDifferenceToDateString = (timeA,timeB) => {\n  let diff = timeB - timeA\n  let hasPassed = diff < 0\n  // https://stackoverflow.com/questions/1787939/check-time-difference-in-javascript#1788084\n  var msec = diff;\n  var hh = Math.floor(msec / 1000 / 60 / 60);\n  msec -= hh * 1000 * 60 * 60;\n  var mm = Math.floor(msec / 1000 / 60);\n  msec -= mm * 1000 * 60;\n  var ss = Math.floor(msec / 1000);\n  msec -= ss * 1000;\n  return {\n    hh,mm,ss,hasPassed\n  }\n}\nexport const timeDifferenceFormatString = (timeA,timeB,withSign = false) => {\n  let {hh,mm,ss,hasPassed} = timeDifferenceToDateString(timeA,timeB)\n  let res = hasPassed?\"-\":(withSign?\"+\":\"\") // if time diff is negative, add a \"-\" in front\n  if(hh == 0 && mm <= 1) return `< ${res}1min`\n  if(hh > 0) return (`${res}${hh}:${mm}h`)\n  return `${res}${mm}min`\n}\nexport const timeDifferenceToDateHHMMSS = (timeA,timeB) => {\n  let {hh,mm,ss,hasPassed} = timeDifferenceToDateString(timeA,timeB)\n  let res = hasPassed?\"-\":\"\" // if time diff is negative, add a \"-\" in front\n  if(hh > 0) res += (pad(hh) + \":\") // since its more than an hour, concat the hour component from front\n  return `${res}${pad(mm)}:${pad(ss)}`\n}\nexport const listOfN = (n) => [...Array(n + 1).keys()].slice(1)\n\nexport const convertMVVStationToMVGStation = (mvvStation,mvgStationList) => {\n  let correspondingMVGStation\n  try {\n\n    correspondingMVGStation = mvgStationList.find(mvgS => mvgS.id == parseInt(mvvStation.ref.id) % 1e5)\n  } catch(e) {\n    return null // aw..\n  }\n  // replace the coordinate to the corresponding mvg station's coordinate...\n  let latlngCoord = [\n    correspondingMVGStation.latitude,\n    correspondingMVGStation.longitude\n  ]\n  return {...mvvStation, coords: latlngCoord}\n}\n\n\nexport const splitConnectionPartCacheLabel = (lbl) => {\n  let parts = lbl.split('-')\n  return {\n    from: parseInt(parts[0]),\n    to: parseInt(parts[1]),\n    line: parts[2],\n    label:lbl,\n  }\n}\nexport const getConnectionPartCacheLabel = (part) => {\n\n  if(!part) return null // cannot compute...\n  let fromStationId = part.from.id,\n      toStationId   = part.to.id\n  if(part.connectionPartType == \"FOOTWAY\")\n    return `${fromStationId}-${toStationId}-FOOTWAY`\n\n  return `${fromStationId}-${toStationId}-${part.label.split('-')[0]}` // for dealing with the SEV case...\n}\n\nexport const getStationLatLng = (station) => {\n  return [station.latitude,station.longitude]\n}\nexport const getStationOverviewComponent = (station) => {\n  return (\n    <div style={style.stationSelection}>\n\n      <div style={style.stationSelection.labels}>\n        {getStationProductLineTags(station)}\n      </div>\n      <div style={style.stationSelection.name}>\n        {station.name}\n      </div>\n\n    </div>\n  )\n}\n// takes a coord string, say '123.456,456.789', and return [123.456,456.789]\nexport const coordsStringToCoord = (cs) => {\n  let parts = cs.split(',')\n  return [parseFloat(parts[0]),parseFloat(parts[1])]\n}\n// given a list of coords (float,float)!, find the closest one to the given point(dist)\n// use L1 distance\n// O(n): scan for each coord, mark the closest one's index, and return it\nexport const getIndexOfClosestCoords = (coords, sample) => {\n  let dists = coords.map((coord) => Math.abs(coord[0] - sample[0]) + Math.abs(coord[1] - sample[1]))\n  let min = Infinity,argmin = -1\n  dists.forEach((dist,i) => {\n    if(dist < min) {\n      min = dist\n      argmin = i\n    }\n  })\n  return argmin\n}\n\n// given an item, find the coordinates of the smooth path\n/*\n  To do this\n  a. first find the coorespondece of the latlng of stations and the weird coordinates from mvv\n  b. then get the line segment of between from each station parts\n  c. apply the transformation to each of the point, and return the result...\n*/\nexport const getSmoothPathCoordsInLatLng = (items,mvvStationParts,mvgStationList) => {\n  // a. first of all, gather the correspondence\n  // a.1. I need a list of [[latlng],[weirdCoords]] for each station\n  let getCorrespondences = (mvgId) => {\n    let mvvStation = items.points.find(mvv => parseInt(mvv.ref.id) % 1e5 == mvgId)\n    let mvgStation = mvgStationList.find(mvg => mvg.id == mvgId)\n    if(!mvvStation || !mvgStation) throw(`no correspondence for ${mvgId}`)\n    // assume theres such station...\n    let weirdCoords  = coordsStringToCoord(mvvStation.ref.coords)\n    let latlngCoords = [mvgStation.latitude,mvgStation.longitude]\n    return {latlng:latlngCoords,weird: weirdCoords}\n  }\n\n  // a.2. I need to find a Matrix A so that A * (weirdCoords) = latlng, by minimizing this Ax = b problem, iteratively...\n  // <stroke>but lets try something easier first: just find a correspondence using the from station and to station</stroke>\n  // The above doesn't work, lets try plan B:\n  // for each stations at the middle, approximate the path points between them as linear, then apply them individually to the points in between\n\n  // matrix are in major order, say x[0][1] is the element at 0-th row, 1-st column\n  let\n      // x = [\n      //       [correspondences[0].weird[0], correspondences[1].weird[0] ],\n      //       [correspondences[0].weird[1], correspondences[1].weird[1] ]\n      //     ],\n      // b = [\n      //       [correspondences[0].latlng[0], correspondences[1].latlng[0] ],\n      //       [correspondences[0].latlng[1], correspondences[1].latlng[1] ]\n      //     ],\n      det = (mat) => mat[0][0] * mat[1][1] - ( mat[0][1] * mat[1][0]),\n      // inverse of a 2*2 mat\n      inv = (mat) => {\n        let d = det(mat)\n        if(d == 0) throw('singular matrix')// singular - but unlikely since the coordinates can't be the same - unless you pass the same station twice...\n        return [\n          [ mat[1][1] / d,-mat[0][1] / d], // d ,-b\n          [-mat[1][0] / d, mat[0][0] / d]  // -c, a\n        ]\n      },\n      // multiplication of 2 2x2 matrices\n      mul = (ma,mb) => {\n        return [\n          [ma[0][0] * mb[0][0] + ma[0][1] * mb[1][0], ma[0][0] * mb[0][1] + ma[0][1] * mb[1][1] ],\n          [ma[1][0] * mb[0][0] + ma[1][1] * mb[1][0], ma[1][0] * mb[0][1] + ma[1][1] * mb[1][1] ]\n        ]\n      },\n      // multiplcation of 2x2 matrices to a 2x1 vector: Ax\n      mul2To1 = (ma,v) => {\n        return [\n          [ma[0][0] * v[0] + ma[0][1] * v[1]],\n          [ma[1][0] * v[0] + ma[1][1] * v[1]]\n        ]\n      },\n      // the linear transform we wanted!\n      getRelationMatrix = (b,x) =>  mul(b,inv(x))\n\n  // b. find the list of [weirdCoords] between fromStationId to toStationId, this can be solved by direct inverse...\n  // b.1. find the closest coordinates in the smooth coord to the tip of the stations...\n  let smoothWeirdCoords = items.paths[0].path.split(' ').map(coordsStringToCoord),\n      /*\n        function for getting the smooth line segment between two points\n        we do the same thing with the alg. that finds a transformation matrix using the correspondence of 2 endpoints,\n        just that we apply it piecewise, so that one matrix is obtained for each space between two stations.\n        The station's latlng will not be changed even without specifiing them explicitly\n        because all matrices found are using the station's correspondences as clue,\n        so the true latlng of the stations will be recovered by each of the matrices\n      */\n      getSmoothLineSegment = (stationsAId,stationsBId) => {\n        let correspondences = [stationsAId,stationsBId].map(getCorrespondences)\n        if(correspondences.some(corr => ! corr)) return null // sorry some of them cannot be converted...\n        let\n            x = [\n                  [correspondences[0].weird[0], correspondences[1].weird[0] ],\n                  [correspondences[0].weird[1], correspondences[1].weird[1] ]\n                ],\n            b = [\n                  [correspondences[0].latlng[0], correspondences[1].latlng[0] ],\n                  [correspondences[0].latlng[1], correspondences[1].latlng[1] ]\n                ],\n            fromIndsInSmoothWeirdCoords = getIndexOfClosestCoords(smoothWeirdCoords,correspondences[0].weird),\n            toIndsInSmoothWeirdCoords   = getIndexOfClosestCoords(smoothWeirdCoords,correspondences[1].weird),\n            // b.2 figure out which side has a larger index, and flip it accordingly\n                applyIndices = ((fromIndsInSmoothWeirdCoords < toIndsInSmoothWeirdCoords)?\n                  [fromIndsInSmoothWeirdCoords,toIndsInSmoothWeirdCoords]:\n                  [toIndsInSmoothWeirdCoords,fromIndsInSmoothWeirdCoords]),\n                // then slice the smooth weird coords to ge the segments between from-to stations\n                smoothWeirdCoordsSegment = smoothWeirdCoords.slice(...applyIndices),\n            // b.3 prepend & append the to stations' coordinates in\n                finalWeirdCoordsSegment = [\n                  correspondences[0].weird,\n                  ...smoothWeirdCoordsSegment,\n                  correspondences[1].weird]\n            // c. transform the segment of weird coordinate to latlng coordinate\n            let latLngSegment = finalWeirdCoordsSegment.map(\n              weird => mul2To1(getRelationMatrix(b,x),weird))\n            // ...and return\n            // why flatten? because it'a a column vector 2 * 1!\n            return latLngSegment.map(latlng => flattenList(latlng))\n      }\n      // now get smooth line segment between stations...\n      let results = []\n      for(let i = 0; i < mvvStationParts.length - 1; i++) {\n        let segment = getSmoothLineSegment(\n          ...mvvStationParts.slice(i,i + 2)\n            .map(part => parseInt(part.ref.id) % 1e5))\n        results = results.concat(segment)\n      }\n      return results\n\n}\n","const request = require('request')\nconst Utils = require('../utils/utils')\nexport default class {\n  constructor() {\n    // this.orgEndpoint = \"https://www.mvg.de/fahrinfo/api\"\n    this.proxyURL = \"http://localhost:9898/mvg\"\n    this.endpoint = `${this.proxyURL}/fahrinfo/api`\n    this.header =  {\n      \"X-MVG-Authorization-Key\": \"5af1beca494712ed38d313714d4caff6\",\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    }\n  }\n  // endpoint composition\n  getDepartureEndpointById(id) {\n    return `${this.endpoint}/departure/${id}?footway=0`\n  }\n  getStationsEndpoint(name) {\n    return `${this.endpoint}/location/query?q=${name}`\n  }\n  getStationsUnrestrictedEndpoint(name) {\n    return `${this.endpoint}/location/queryWeb?q=${name}`\n  }\n\n  getConnectionEndpoint(from_id,to_id) {\n    return `${this.endpoint}/routing/?fromStation=${from_id}&toStation=${to_id}`\n  }\n  // useful functions\n  // for all of them, do not reject, use error instead\n  async getAllStations() {\n    let url = this.getStationsUnrestrictedEndpoint(\"\")\n    try {\n      let response = await this.performRequest(url)\n      if(response.error) return {error: response.error}\n      return response.locations\n    } catch(e) {\n      return {error:e}\n    }\n\n  }\n  async getConnections(from_id,to_id) {\n    let url = this.getConnectionEndpoint(from_id,to_id)\n    let response = await this.performRequest(url)\n    if(response.error || !response.connectionList) return response\n    return response.connectionList // the \"connectionPartList\" inside each element will be useful\n  }\n\n  async getDepartureById(id,numDepartures = -1) {\n    let url = this.getDepartureEndpointById(id)\n    let response = await this.performRequest(url)\n    if(response.error) return response // sorry..\n    let result,\n        now = new Date(),\n        validDepartures = response.departures.filter(departure => departure.departureTime >= now)\n    if(numDepartures <= 0 ) result = validDepartures\n    else result = validDepartures.slice(0,numDepartures)\n    return result.map(dep => ({...dep,id})) // add the request id to departures, so that the origin of the departure can be traced later\n  }\n  async getServingLines(id) {\n    let url = this.getDepartureEndpointById(id)\n    let response = await this.performRequest(url)\n    if(response.error) return response\n    return response.servingLines.map(line => ({\n      destination: line.destination,\n      line: line.lineNumber,\n      product: line.product\n    }))\n  }\n  getClosestStations(lat,lng,stations,number = 3) {\n    if(number <= 0 ) return []\n    if(stations.error) return stations // this is an error!\n    // now filter the closest\n    // kudos https://stackoverflow.com/questions/27928/calculate-distance-between-two-latitude-longitude-points-haversine-formula#27943\n\n\n    let stationsByDistance = stations.sort((a,b) => {\n      // convert a,b to the distance given\n      let latA = a.latitude\n      let lngA = a.longitude\n      let latB = b.latitude\n      let lngB = b.longitude\n\n      return Utils.getDistanceFromLatLonInKm(lat,lng,latA,lngA) - Utils.getDistanceFromLatLonInKm(lat,lng,latB,lngB)\n    })\n\n    return stationsByDistance.slice(0,number)\n  }\n\n  // perform actual requests\n  performRequest(url) {\n    return fetch(url,{\n      headers: this.header,\n    }).then(response => {\n      if(!response.ok) return {error:response}\n      return response.json()\n    })\n  }\n}\n","export const INVALID_STATION = \"INVALID_STATION\"\nexport const STORAGE_FAIL = \"STORAGE_FAIL\"\n\nexport const ADD_DESTINATION = \"ADD_DESTINATION\"\nexport const ADD_DESTINATION_SUCCESS = \"ADD_DESTINATION_SUCCESS\"\nexport const ADD_DESTINATION_FAILED = \"ADD_DESTINATION_FAILED\"\n\nexport const GET_DESTINATION = \"GET_DESTINATION\"\nexport const GET_DESTINATION_SUCCESS = \"GET_DESTINATION_SUCCESS\"\nexport const GET_DESTINATION_FAILED = \"GET_DESTINATION_FAILED\"\n\nexport const CLEAR_DESTINATION = \"CLEAR_DESTINATION\"\nexport const CLEAR_DESTINATION_SUCCESS = \"CLEAR_DESTINATION_SUCCESS\"\nexport const CLEAR_DESTINATION_FAILED = \"CLEAR_DESTINATION_FAILED\"\n\nexport const REMOVE_DESTINATION = \"REMOVE_DESTINATION\"\nexport const REMOVE_DESTINATION_SUCCESS = 'REMOVE_DESTINATION_SUCCESS'\nexport const REMOVE_DESTINATION_FAILED = \"REMOVE_DESTINATION_FAILED\"\n\nexport const SHOW_DESTINATION_DETAIL = \"SHOW_DESTINATION_DETAIL\"\n","// @flow\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./configureStore.dev')\n  // module.exports = require('./configureStore.prod'); // eslint-disable-line global-require\n} else {\n  module.exports = require('./configureStore.dev'); // eslint-disable-line global-require\n}\n","import feathers from \"@feathersjs/client\"\nconst rest = feathers.rest\nexport const DATABASE_URL = \"http://localhost:3001\"\nconst app = feathers()\n\n// Connect to a different URL\nconst restClient = rest(DATABASE_URL)\napp.configure(restClient.fetch(window.fetch))\nconst destinationService = app.service('destination')\n\nexport const getDestinations = async () => {\n  let destinations =  await destinationService.find()\n  console.log('destinations',destinations)\n  return destinations\n}\nexport const addDestinations = async (dest) => {\n  return await destinationService.create(dest)\n}\n\nexport const removeDestinations = async (destId) => {\n  console.log('dest id',destId)\n  return await destinationService.remove(destId)\n}\nexport const clearDestinations = async () => {\n  return await destinationService.remove(null,{}) // clear all\n}\n// promises for dealing with exisiting localStorage stuff\nexport const setPromise = (key,data) => new Promise((resolve,reject) => {\n  window.localStorage.setItem(key,JSON.stringify(data))\n  resolve({key,data})\n  // storage.set(key,data,(e) => {\n  //   if(e) reject(e)\n  //   else resolve({key,data})\n  // })\n})\nexport const getPromise = (key) => new Promise((resolve,reject) => {\n  let result = window.localStorage.getItem(key)\n  if(!result) resolve({})\n  try {\n    resolve(JSON.parse(result))\n  } catch(e) {\n    reject(e)\n  }\n\n  // storage.get(key,(e,data) => {\n  //   if(e) reject(e)\n  //   else resolve(data)\n  // })\n})\n\n\nexport const clearPromise = (key) => new Promise((resolve,reject) => {\n  resolve(window.localStorage.clear())\n})\n\nexport const removePromise = (key,id) => new Promise((resolve,reject) => {\n  try {\n    let obj = JSON.parse(window.localStorage.getItem(key))\n    setPromise(key,obj.filter(s => s.id != id))\n      .then(res => resolve(res))\n      .catch(e => reject(e))\n  } catch(e) {\n    reject(e)\n  }\n})\n","import React from 'react'\nimport style from './Style.js'\nimport PropTypes from 'prop-types'\n\nexport default function LineTag(props) {\n  return (\n    <div style={{...style.lineTag,...props}}>\n      {props.line}\n    </div>\n  )\n}\n","export const TOGGLE_LOCATION_MODE = \"TOGGLE_LOCATION_MODE\"\nexport const SET_LOCATION = \"SET_LOCATION\"\nexport const SET_LOCATION_SUCCESS = \"SET_LOCATION_SUCCESS\"\nexport const SET_LOCATION_FAILED = \"SET_LOCATION_FAILED\"\n","export const CLOCK_TICK = \"CLOCK_TICK\"\nexport const CLOCK_RESET = \"CLOCK_RESET\"\nexport const TOGGLE_UPDATE = \"TOGGLE_UPDATE\"\n"],"sourceRoot":""}